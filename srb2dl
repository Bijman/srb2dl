#!/bin/sh

FAILURE="\e[1;91m"
SUCCESS="\e[1;92m"
NOTICE="\e[1;93m"
MESSAGE="\e[1;94m"
PROMPT="\e[1;97m"
SRB2PERSONAFILEID="5neoderzan6mbh3"
SRB2PERSONAAPPIMAGEID="1PS5QHiuWXR4NrfB_ifAb2dQ7F1tAHrT1"

choosepage() {
    # Display page of chosen category.
    NEXT="\033[1m\033[34mNext Page $((PAGE + 1))\033[0m"
    PREV="\033[1m\033[34mPrevious Page $((PAGE - 1))\033[0m"
    BACK2CAT="\033[1m\033[34mBack to categories\033[0m"
    BACK2ADDON="\033[1m\033[34mBack to addons\033[0m"
    BACK2SEARCHRESULT="\033[1m\033[34mBack to search results\033[0m"
    BACK2SEARCH="\033[1m\033[34mBack to search\033[0m"
    DONE="\033[1m\033[34mDone\033[0m"
    if [ -z "$arrayfile" ] && [ -z "$arrayfilename" ]; then

        if [ "$REUSABLE" = 1 ]; then

            PAGECODE=$(curl -s "$CATURL=$PAGE&prefix_id=1")

        else

            PAGECODE=$(curl -s "$CATURL=$PAGE")

        fi

    fi

    # Variables to show information like star rating, author, resource's title, etc.
    STARNUMS=$(printf "%s\n" "$PAGECODE" | gawk -F'title="|">|star' '/ratingStars--larger/ {print $2}')
    STARS=$(for i in $STARNUMS; do
        if [ "${i%%.*}" = 0 ] && [ "${i##*.}" -lt 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^0.[0-9]*$/,"☆ ☆ ☆ ☆ ☆")'

        elif [ "${i%%.*}" = 1 ] && [ "${i##*.}" -lt 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^1.[0-9]*$/,"★ ☆ ☆ ☆ ☆")'

        elif [ "${i%%.*}" = 2 ] && [ "${i##*.}" -lt 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^2.[0-9]*$/,"★ ★ ☆ ☆ ☆")'

        elif [ "${i%%.*}" = 3 ] && [ "${i##*.}" -lt 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^3.[0-9]*$/,"★ ★ ★ ☆ ☆")'

        elif [ "${i%%.*}" = 4 ] && [ "${i##*.}" -lt 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^4.[0-9]*$/,"★ ★ ★ ★ ☆")'

        elif [ "${i%%.*}" = 5 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^5.[0-9]*$/,"★ ★ ★ ★ ★")'

        elif [ "${i%%.*}" = 0 ] && [ "${i##*.}" -ge 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^0.[0-9]*$/,"⯪ ☆ ☆ ☆ ☆")'

        elif [ "${i%%.*}" = 1 ] && [ "${i##*.}" -ge 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^1.[0-9]*$/,"★ ⯪ ☆ ☆ ☆")'

        elif [ "${i%%.*}" = 2 ] && [ "${i##*.}" -ge 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^2.[0-9]*$/,"★ ★ ⯪ ☆ ☆")'

        elif [ "${i%%.*}" = 3 ] && [ "${i##*.}" -ge 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^3.[0-9]*$/,"★ ★ ★ ⯪ ☆")'

        elif [ "${i%%.*}" = 4 ] && [ "${i##*.}" -ge 50 ]; then

            printf "%s\n" "$i" | gawk 'gsub(/^4.[0-9]*$/,"★ ★ ★ ★ ⯪")'

        fi

    done)

    TAGLINES=$(printf "%s\n" "$PAGECODE" | gawk -F'<div class="structItem-resourceTagLine">|</div>' '/<div class="structItem-resourceTagLine">/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print $2}')
    USERS=$(printf "%s\n" "$PAGECODE" | gawk -F'data-author="|">' '/data-author="/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print $2}')
    DATE=$(printf "%s\n" "$PAGECODE" | gawk -F'class="u-concealed"><time  class="u-dt" dir="auto" datetime="*.*" data-time="*.*" data-date-string="*.*" data-time-string="*.*" title="*.*">|</time></a></dd>' '/class="u-concealed"><time  class="u-dt" dir="auto" datetime="*.*" data-time="*.*" data-date-string="*.*" data-time-string="*.*" title="*.*">/ {print $2}')

    if [ "$SEARCH" = 1 ]; then

        if [ -z "$arrayfile" ] && [ -z "$arrayfilename" ]; then

            if [ -n "$SEARCHQUERYUSER" ]; then

                SEARCHPAGECODE=$(curl -s "$SEARCHURL")

            else

                SEARCHPAGECODE=$(curl -s "$SEARCHURL&page=$PAGE")

            fi

        fi

        USERS=$(printf "%s\n" "$SEARCHPAGECODE" | gawk -F'data-author="|"' '/data-author=/ {print $4}' | gawk '{gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print}')
        CATEGORIES=$(printf "%s\n" "$SEARCHPAGECODE" | gawk -F'<li>Category: <a href="/addons/categories/*.*">|</a></li>' '/<li>Category: <a href="\/addons\/categories/ {print $2}')
        DATE=$(printf "%s\n" "$SEARCHPAGECODE" | gawk -F'<li><time  class="*.*">|</time></li>' '/<li><time  class=/ {print $2}')

        arraypagesearch=$(printf "%s\n" "$SEARCHPAGECODE" | gawk -F'<a href="|</a>' '/addons/ {split($2,a,"\""); print a[1]}' | gawk -F'/' '!/\/addons\/$|latest-reviews|categories/ && NF {print $3}')

        arraypagesearchnametmp=$(printf "%s\n" "$SEARCHPAGECODE" | gawk -F'">|</a>|<span class="label label--primary" dir="auto|&nbsp;</span>|<em class="textHighlight|</span><span class="label-append|</em>' '/\/addons\// && !/categories/ {for (i = 2; i <= NF; i++) printf "\033[1m"$i"\033[0m"; print ""}' | gawk '{for (i = 1 ; i <= NF ; i++) {gsub("&#039;","\47") gsub("&amp;","\\&") gsub("&quot;","\"") gsub("^.$","")}}1' | gawk 'NF {gsub(/\[Reusable\]/,"\033[34;7m[Reusable]\033[0m "); print "\033[1m"$0"\033[0m"}')

        arraypagesearchname=$(printf "%s\n" "$(
            gawk -v left="$arraypagesearchnametmp" -v leftcenter="$USERS" -v rightcenter="$DATE" -v right="$CATEGORIES" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++)
{print l[i] " - " "\033[37mUser: "lc[i]"\033[0m" " - " "\033[2mUpdated: "rc[i]"\033[0m" " - " "\033[2mCategory: "r[i]"\033[0m" }}'
        )")

        if [ -z "$arraypagesearch" ]; then

            arraypage=$(printf "Back2Search\nDone")
            arraypagename=$(printf "$BACK2SEARCH\n$DONE")

        else

            arraypage=$(printf "%s\nPrev\nNext\nBack2Search\nDone" "$arraypagesearch")
            arraypagename=$(printf "%s\n$PREV\n$NEXT\n$BACK2SEARCH\n$DONE" "$arraypagesearchname")

        fi

    elif [ "$BUILD" = 1 ]; then

        arraypage=$(printf "SRB2\nSRB2UncappedPlus\nSRB2NetPlus\nSRB2VR\nSRB2Persona\nSRB2Android\nSRB2Switch\nSRB2-2.1\nSRB2-2.1-Legacy\nSRB2-2.1-MegaDrive\nSRB2Archive\n%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F'"|/updates|/addons/' '/<dd>/ {print $3}' | gawk 'NF')")

        arraypagenametmp=$(printf "%s\n" "$PAGECODE" | gawk -F'data-tp-primary="on">|class="labelLink" rel="nofollow"><span class="label label--primary" dir="auto">|</span></a>|</a>' '/data-tp-primary="on">/ || /class="labelLink" rel="nofollow"><span class="label label--primary" dir="auto">/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print "\033[1m"$2"\033[0m"}' | gawk '/\[Reusable\]/ {getline t; print "\033[7;34m"$1"\033[0m",t; next}1')

        arraypagename=$(printf "\033[1mSRB2\033[0m\n\033[1mSRB2 - Uncapped Plus\033[0m\n\033[1mSRB2 - NetPlus\033[0m\n\033[1mSRB2 - VR\033[0m\n\033[1mSRB2 - Persona\033[0m\n\033[1mSRB2 - Android Port\033[0m\n\033[1mSRB2 - Switch Port\033[0m\n\033[1mSRB2 2.1\033[0m\n\033[1mSRB2 2.1 - Legacy\033[0m\n\033[1mSRB2 2.1 - SEGA Genesis/Mega Drive Port\033[0m\n\033[1mSRB/SRB2 - Archived Versions\033[0m\n%s\n$PREV\n$NEXT\n$BACK2CAT\n$DONE" "$(
            gawk -v left="$arraypagenametmp" -v leftcenter="$TAGLINES" -v rightcenter="$USERS" -v right="$STARS" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++)
{print l[i] " - " "\033[2m"lc[i]"\033[0m" " - " "\033[37mUser: "rc[i]"\033[0m" " - " "\033[1;33m"r[i]"\033[0m"}}'
        )")

    elif [ "$KARTBUILD" = 1 ]; then

        arraypage=$(printf "SRB2Kart\nSRB2KartMoeMansion\nSRB2KartVR\nSRB2KartSwitch\n%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F'"|/updates|/addons/' '/<dd>/ {print $3}' | gawk 'NF')")

        arraypagenametmp=$(printf "%s\n" "$PAGECODE" | gawk -F'data-tp-primary="on">|class="labelLink" rel="nofollow"><span class="label label--primary" dir="auto">|</span></a>|</a>' '/data-tp-primary="on">/ || /class="labelLink" rel="nofollow"><span class="label label--primary" dir="auto">/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print "\033[1m"$2"\033[0m"}' | gawk '/\[Reusable\]/ {getline t; print "\033[7;34m"$1"\033[0m",t; next}1')

        arraypagename=$(printf "\033[1mSRB2Kart\033[0m\n\033[1mSRB2Kart - Moe Mansion\033[0m\n\033[1mSRB2Kart - VR\033[0m\n\033[1mSRB2Kart - Switch Port\033[0m\n%s\n$PREV\n$NEXT\n$BACK2CAT\n$DONE" "$(
            gawk -v left="$arraypagenametmp" -v leftcenter="$TAGLINES" -v rightcenter="$USERS" -v right="$STARS" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++)
{print l[i] " - " "\033[2m"lc[i]"\033[0m" " - " "\033[37mUser: "rc[i]"\033[0m" " - " "\033[1;33m"r[i]"\033[0m"}}'
        )")

    else

        arraypage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F'"|/updates|/addons/' '/<dd>/ {print $3}' | gawk 'NF')")

        arraypagenametmp=$(printf "%s\n" "$PAGECODE" | gawk -F'data-tp-primary="on">|class="labelLink" rel="nofollow"><span class="label label--primary" dir="auto">|</span></a>|</a>' '/data-tp-primary="on">/ || /class="labelLink" rel="nofollow"><span class="label label--primary" dir="auto">/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print "\033[1m"$2"\033[0m"}' | gawk '/\[Reusable\]/ {getline t; print "\033[7;34m"$1"\033[0m",t; next}1')

        arraypagename=$(printf "%s\n$PREV\n$NEXT\n$BACK2CAT\n$DONE" "$(
            gawk -v left="$arraypagenametmp" -v leftcenter="$TAGLINES" -v center="$USERS" -v rightcenter="$DATE" -v right="$STARS" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++)
{print l[i] " - " "\033[2m"lc[i]"\033[0m" " - " "\033[37mUser: "c[i]"\033[0m" " - " "\033[0m\033[37mUpdated: "rc[i]"\033[0m" " - " "\033[1;33m"r[i]"\033[0m"}}'
        )")

    fi

    if [ "$FILES" = 0 ]; then

        count="$(printf "%s\n" "$arraypage" | wc -l)"
        n=""
        clear
        printf "\033[1m\033[34m%s\n\033[0m" "Please choose resource by typing number and then pressing enter. Press enter or ctrl+c to quit."
        printf "%s\n" "$arraypagename" | gawk '{print NR")", $0}'

        while true; do

            printf "#? "
            read -r n

            if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

                OPTURL=$(printf "%s\n" "$arraypage" | gawk 'NR=='"${n}"'')
                break

            else

                printf "$NOTICE\n%s\n\e[0m" "No resource has been chosen."
                exit

            fi

        done

        choosefile

    elif [ "$FILES" = 1 ]; then

        choosefile

    fi
}

choosefile() {
    # Choose file selected from addon's page.
    if [ "$OPTURL" != "Next" ] && [ "$OPTURL" != "Prev" ] && [ "$OPTURL" != "Back2Cat" ] && [ "$OPTURL" != "Back2Addon" ] && [ "$OPTURL" != "Back2Search" ] && [ "$OPTURL" != "Back2SearchResult" ] && [ "$OPTURL" != "Done" ]; then

        clear

        if [ "$SRB2DLPREVIEW" = 1 ]; then

            if [ -n "$BROWSER" ] && [ "$FILES" = 0 ] && [ "$OPTURL" != "SRB2" ] && [ "$OPTURL" != "SRB2UncappedPlus" ] && [ "$OPTURL" != "SRB2NetPlus" ] && [ "$OPTURL" != "SRB2VR" ] && [ "$OPTURL" != "SRB2Persona" ] && [ "$OPTURL" != "SRB2Android" ] && [ "$OPTURL" != "SRB2Switch" ] && [ "$OPTURL" != "SRB2-2.1" ] && [ "$OPTURL" != "SRB2-2.1-Legacy" ] && [ "$OPTURL" != "SRB2-2.1-MegaDrive" ] && [ "$OPTURL" != "SRB2Archive" ] && [ "$OPTURL" != "SRB2Kart" ] && [ "$OPTURL" != "SRB2KartMoeMansion" ] && [ "$OPTURL" != "SRB2KartVR" ] && [ "$OPTURL" != "SRB2KartSwitch" ]; then

                printf "%s\n\n" "Opening link to files."
                $BROWSER "https://mb.srb2.org/addons/$OPTURL" > /dev/null &

            elif [ -x "/usr/bin/w3m" ] && [ "$FILES" = 0 ] && [ "$OPTURL" != "SRB2" ] && [ "$OPTURL" != "SRB2UncappedPlus" ] && [ "$OPTURL" != "SRB2NetPlus" ] && [ "$OPTURL" != "SRB2VR" ] && [ "$OPTURL" != "SRB2Persona" ] && [ "$OPTURL" != "SRB2Android" ] && [ "$OPTURL" != "SRB2Switch" ] && [ "$OPTURL" != "SRB2-2.1" ] && [ "$OPTURL" != "SRB2-2.1-Legacy" ] && [ "$OPTURL" != "SRB2-2.1-MegaDrive" ] && [ "$OPTURL" != "SRB2Archive" ] && [ "$OPTURL" != "SRB2Kart" ] && [ "$OPTURL" != "SRB2KartMoeMansion" ] && [ "$OPTURL" != "SRB2KartVR" ] && [ "$OPTURL" != "SRB2KartSwitch" ]; then

                w3m "https://mb.srb2.org/addons/$OPTURL"

            fi

        fi

        printf "\033[1m\033[34m%s\n\033[0m" "Please choose file by typing number and then pressing enter. Press enter or ctrl+c to quit."

        if [ -z "$arrayfile" ] && [ -z "$arrayfilename" ]; then

            if [ "$OPTURL" != "SRB2" ] && [ "$OPTURL" != "SRB2UncappedPlus" ] && [ "$OPTURL" != "SRB2NetPlus" ] && [ "$OPTURL" != "SRB2VR" ] && [ "$OPTURL" != "SRB2Persona" ] && [ "$OPTURL" != "SRB2Android" ] && [ "$OPTURL" != "SRB2Switch" ] && [ "$OPTURL" != "SRB2-2.1" ] && [ "$OPTURL" != "SRB2-2.1-Legacy" ] && [ "$OPTURL" != "SRB2-2.1-MegaDrive" ] && [ "$OPTURL" != "SRB2Archive" ] && [ "$OPTURL" != "SRB2Kart" ] && [ "$OPTURL" != "SRB2KartMoeMansion" ] && [ "$OPTURL" != "SRB2KartVR" ] && [ "$OPTURL" != "SRB2KartSwitch" ]; then

                OPTURLTHREAD=$(curl -s "https://mb.srb2.org/addons/$OPTURL/" | gawk -F'/|"|\\\' '/discussionUrl/ {print $12}')
                DOWNLOADHEADER=$(curl -Is "https://mb.srb2.org/addons/$OPTURL/download/" | gawk -F'"' '/filename/ {print $2}')
                ATTACHMENTCODE=$(curl -s "https://mb.srb2.org/threads/$OPTURLTHREAD/")

                if [ -z "$DOWNLOADHEADER" ]; then

                    LATESTCODE=$(curl -s "https://mb.srb2.org/addons/$OPTURL/download/")
                    LATEST=$(printf "%s\n" "$LATESTCODE" | gawk -F'a href="|" class' '/version/ {print $2}' | gawk 'NF')
                    LATESTNAME=$(printf "%s\n" "$LATESTCODE" | gawk -F'<h3 class="contentRow-title">|</h3>' '(/.zip/ || /.7z/ || /.rar/ || /.pk3/ || /.wad/ || /.lua/ || /.exe/ || /.soc/ || /.ZIP/ || /.7Z/ || /.RAR/ || /.PK3/ || /.WAD/ || /.LUA/ || /.EXE/ || /.SOC/) {print $2}' | gawk 'NF')

                else

                    LATEST="addons/$OPTURL/download"
                    LATESTNAME="$DOWNLOADHEADER"

                fi

            fi

            arrayattachment=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'href="|"' '/attachments/ && (/.zip/ || /.7z/ || /.rar/ || /.pk3/ || /.wad/ || /.lua/ || /.exe/ || /.soc/ || /.ZIP/ || /.7Z/ || /.RAR/ || /.PK3/ || /.WAD/ || /.LUA/ || /.EXE/ || /.SOC/) && NF {print $4}' | gawk -F'/' '{print $2"/"$3}' | gawk '!/^\/$/ {print}')
            arrayattachmentname=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'">|</span>' '/title/ {split($2,a,"<"); print a[1]}' | gawk '(/.zip/ || /.7z/ || /.rar/ || /.pk3/ || /.wad/ || /.lua/ || /.exe/ || /.soc/ || /.ZIP/ || /.7Z/ || /.RAR/ || /.PK3/ || /.WAD/ || /.LUA/ || /.EXE/ || /.SOC/) && NF')

            if [ "$SEARCH" = 1 ]; then

                if [ -z "$LATEST" ] && [ -z "$arrayattachment" ]; then

                    arrayfile=$(printf "Back2SearchResult\nBack2Search\nDone")
                    arrayfilename=$(printf "$BACK2SEARCHRESULT\n$BACK2SEARCH\n$DONE")

                elif [ -z "$LATEST" ]; then

                    arrayfile=$(printf "%s\nBack2SearchResult\nBack2Search\nDone" "$arrayattachment")
                    arrayfilename=$(printf "%s\n$BACK2SEARCHRESULT\n$BACK2SEARCH\n$DONE" "$arrayattachmentname")

                elif [ -z "$arrayattachment" ]; then

                    arrayfile=$(printf "$LATEST\nBack2SearchResult\nBack2Search\nDone")
                    arrayfilename=$(printf "$LATESTNAME\n$BACK2SEARCHRESULT\n$BACK2SEARCH\n$DONE")

                else

                    arrayfile=$(printf "$LATEST\n%s\nBack2SearchResult\nBack2Search\nDone" "$arrayattachment")
                    arrayfilename=$(printf "$LATESTNAME\n%s\n$BACK2SEARCHRESULT\n$BACK2SEARCH\n$DONE" "$arrayattachmentname")

                fi

            else

                if [ "$OPTURL" = "SRB2" ]; then

                    SRB2=$(curl -s "https://api.github.com/repos/STJr/SRB2/releases/latest" | gawk -F'"' '/browser_download_url.*./ {print $4}')
                    SRB2APPIMAGE=$(curl -s "https://api.github.com/repos/GoldenTails/SRB2/releases/latest" | gawk -F'"' '/browser_download_url.*.AppImage/ {print $4}')
                    SOURCECODEZIP="https://api.github.com/repos/STJr/SRB2/zipball"
                    SOURCECODETAR="https://api.github.com/repos/STJr/SRB2/tarball"
                    arrayfile=$(printf "$SRB2\n$SRB2APPIMAGE\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "$(printf "%s\n" "$SRB2" | gawk -F'/' '{print $NF}')\n$(printf "%s\n" "$SRB2APPIMAGE" | gawk -F'/' '{print $NF}')\nSRB2 Source Code (zip)\nSRB2 Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE")

                elif [ "$OPTURL" = "SRB2UncappedPlus" ]; then

                    SRB2UNCAPPEDPLUS=$(curl -s "http://srb2.mooo.com/srb2builds/uncapped-plus/" | gawk -F'">|</a>' '/.exe<\/a>/ {print $3}')
                    SOURCECODEZIP="https://git.do.srb2.org/api/v4/projects/226/repository/archive.zip?sha=uncapped-plus"
                    SOURCECODETAR="https://git.do.srb2.org/api/v4/projects/226/repository/archive.tar.gz?sha=uncapped-plus"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2UNCAPPEDPLUS")
                    arrayfilename=$(printf "%s\nSRB2 Uncapped Plus Source Code (zip)\nSRB2 Uncapped Plus Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$SRB2UNCAPPEDPLUS")

                elif [ "$OPTURL" = "SRB2NetPlus" ]; then

                    SOURCECODEZIP="https://git.netplus.friskyfox.art/NetPlus/netplus/archive/master.zip"
                    SOURCECODETAR="https://git.netplus.friskyfox.art/NetPlus/netplus/archive/master.tar.gz"
                    arrayfile=$(printf "$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "SRB2 NetPlus Source Code (zip)\nSRB2 NetPlus Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE")

                elif [ "$OPTURL" = "SRB2VR" ]; then

                    SRB2VR=$(curl -s "https://git.do.srb2.org/api/v4/projects/261/releases" | gawk '{gsub('/^{/',"{\n") || gsub('/}$/',"\n}") || gsub('/,/',",\n"); print}' | gawk '/uploads/ {split($0,a,"\\)|\\(");print a[2]"\n"a[4]"\n"a[6]}' | gawk '!/default/ && NF')
                    SOURCECODEZIP="https://git.do.srb2.org/api/v4/projects/261/repository/archive.zip?sha=openvr"
                    SOURCECODETAR="https://git.do.srb2.org/api/v4/projects/261/repository/archive.tar.gz?sha=openvr"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2VR")
                    arrayfilename=$(printf "%s\nSRB2 VR Source Code (zip)\nSRB2 VR Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2VR" | gawk -F'/' '{print $NF}')")

                elif [ "$OPTURL" = "SRB2Persona" ]; then

                    SRB2PERSONA="https://www.dropbox.com/s/$SRB2PERSONAFILEID"
                    SRB2PERSONAAPPIMAGE="https://drive.google.com/uc?id=$SRB2PERSONAAPPIMAGEID"
                    SOURCECODEZIP="https://git.do.srb2.org/api/v4/projects/97/repository/archive.zip?sha=srb2p_22"
                    SOURCECODETAR="https://git.do.srb2.org/api/v4/projects/97/repository/archive.tar.gz?sha=srb2p_22"
                    arrayfile=$(printf "$SRB2PERSONA\n$SRB2PERSONAAPPIMAGE\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "$(curl -LIs "https://www.dropbox.com/s/$SRB2PERSONAFILEID" | gawk -F'"' '/content-disposition:/ {print $2}')\n$(curl -X GET -LIs "https://drive.google.com/uc?id=$SRB2PERSONAAPPIMAGEID" | gawk -F'"' '/content-disposition:/ {print $2}')\nSRB2 Persona Source Code (zip)\nSRB2 Persona Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE")

                elif [ "$OPTURL" = "SRB2Android" ]; then

                    SRB2ANDROID=$(curl -s "https://api.github.com/repos/Lactozilla/SRB2-Android/releases" | gawk -F'"' '/browser_download_url.*./ {print $4}')
                    SOURCECODEZIP="https://api.github.com/repos/Lactozilla/SRB2-Android/zipball"
                    SOURCECODETAR="https://api.github.com/repos/Lactozilla/SRB2-Android/tarball"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2ANDROID")
                    arrayfilename=$(printf "%s\nSRB2 Android Source Code (zip)\nSRB2 Android Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2ANDROID" | gawk -F'/' '{print $NF}')")

                elif [ "$OPTURL" = "SRB2Switch" ]; then

                    SRB2SWITCH=$(curl -s "https://api.github.com/repos/heyjoeway/SRB2/releases" | gawk -F'"' '/browser_download_url.*./ {print $4}')
                    SOURCECODEZIP="https://api.github.com/repos/heyjoeway/SRB2/zipball"
                    SOURCECODETAR="https://api.github.com/repos/heyjoeway/SRB2/tarball"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2SWITCH")
                    arrayfilename=$(printf "%s\nSRB2 Switch Source Code (zip)\nSRB2 Switch Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2SWITCH" | gawk -F'/' '{print $NF}')")

                elif [ "$OPTURL" = "SRB2-2.1" ]; then

                    SRB2OLD21=$(curl -s "https://api.github.com/repos/STJr/SRB2/releases/19358575" | gawk -F'"' '/browser_download_url.*zip/ || /browser_download_url.*exe/ || /browser_download_url.*dmg/ {print $4}')
                    SOURCECODEZIP="https://api.github.com/repos/STJr/SRB2/zipball/SRB2_release_2.1.25"
                    SOURCECODETAR="https://api.github.com/repos/STJr/SRB2/tarball/SRB2_release_2.1.25"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2OLD21")
                    arrayfilename=$(printf "%s\nSRB2 2.1 Source Code (zip)\nSRB2 2.1 Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2OLD21" | gawk -F'/' '{print $NF}')")

                elif [ "$OPTURL" = "SRB2-2.1-Legacy" ]; then

                    SOURCECODEZIP="https://api.github.com/repos/PandaSRC/srb2-legacy/zipball"
                    SOURCECODETAR="https://api.github.com/repos/PandaSRC/srb2-legacy/tarball"
                    arrayfile=$(printf "$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "SRB2 2.1 Legacy Source Code (zip)\nSRB2 2.1 Legacy Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE")

                elif [ "$OPTURL" = "SRB2-2.1-MegaDrive" ]; then

                    SRB2MEGADRIVE=$(curl -s "https://api.github.com/repos/mazmazz/SRB2/releases" | gawk -F'"' '/browser_download_url.*md/ && !/.msi/ {print $4}')
                    SOURCECODEZIP="https://api.github.com/repos/mazmazz/SRB2/zipball/SRB2_release_2.1.23a"
                    SOURCECODETAR="https://api.github.com/repos/mazmazz/SRB2/tarball/SRB2_release_2.1.23a"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2MEGADRIVE")
                    arrayfilename=$(printf "%s\nSRB2 2.1 SEGA Genesis/Mega Drive Source Code (zip)\nSRB2 2.1 SEGA Genesis/Mega Drive Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2MEGADRIVE" | gawk -F'/' '{print $NF}')")

                elif [ "$OPTURL" = "SRB2Archive" ]; then

                    SRB2ARCHIVE=$(curl -s "https://files.srb2.org/srb2.org/history/" | gawk -F'">|</a>' '(/.zip/ || /.exe/) && !/&gt;/ {print $3}')
                    arrayfile=$(printf "%s\nBack2Cat\nBack2Addon\nDone" "$SRB2ARCHIVE")
                    arrayfilename=$(printf "%s\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$SRB2ARCHIVE")

                elif [ "$OPTURL" = "SRB2Kart" ]; then

                    SRB2KART=$(curl -s "https://api.github.com/repos/STJr/Kart-Public/releases/latest" | gawk -F'"' '/browser_download_url.*./ {print $4}')
                    SRB2KARTAPPIMAGE=$(curl -s "https://api.github.com/repos/Lonsfor/srb2k-appimage/releases/latest" | gawk -F'"' '!/moe|.zsync/ && /browser_download_url.*.AppImage/ {print $4}')
                    SOURCECODEZIP="https://api.github.com/repos/STJr/Kart-Public/zipball"
                    SOURCECODETAR="https://api.github.com/repos/STJr/Kart-Public/tarball"
                    arrayfile=$(printf "$SRB2KART\n$SRB2KARTAPPIMAGE\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "%s\n$(printf "%s\n" "$SRB2KARTAPPIMAGE" | gawk -F'/' '{print $NF}')\nSRB2Kart Source Code (zip)\nSRB2Kart Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2KART" | gawk -F'/' '{print $NF}')")

                elif [ "$OPTURL" = "SRB2KartMoeMansion" ]; then

                    SRB2KARTMOEMANSION=$(curl -s "https://kart.moe/moe-mansion/32-bit/" | gawk -F'">|</a>' '/.exe/ {print $4}')
                    SRB2KARTMOEMANSIONAPPIMAGE=$(curl -s "https://api.github.com/repos/Lonsfor/srb2k-appimage/releases/latest" | gawk -F'"' '!/.zsync/ && /browser_download_url.*moe*.*.AppImage/ {print $4}')
                    SOURCECODEZIP="https://gitlab.com/api/v4/projects/19955163/repository/archive.zip"
                    SOURCECODETAR="https://gitlab.com/api/v4/projects/19955163/repository/archive.tar.gz"
                    arrayfile=$(printf "$SRB2KARTMOEMANSION\n$SRB2KARTMOEMANSIONAPPIMAGE\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "$SRB2KARTMOEMANSION\n$(printf "%s\n" "$SRB2KARTMOEMANSIONAPPIMAGE" | gawk -F'/' '{print $NF}')\nSRB2Kart Moe Mansion Source Code (zip)\nSRB2Kart Moe Mansion Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE")

                elif [ "$OPTURL" = "SRB2KartVR" ]; then

                    SRB2KARTVR=$(curl -s "https://gitlab.com/api/v4/projects/24705991/releases" | gawk '{gsub('/^{/',"{\n") || gsub('/}$/',"\n}") || gsub('/,/',",\n"); print}' | gawk '/uploads/ {split($0,a,"\\)|\\(");print a[2]"\n"a[4]"\n"a[6]}' | gawk '!/default/ && NF')
                    SOURCECODEZIP="https://gitlab.com/api/v4/projects/24705991/repository/archive.zip?sha=very-cool-renderer"
                    SOURCECODETAR="https://gitlab.com/api/v4/projects/24705991/repository/archive.tar.gz?sha=very-cool-renderer"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2KARTVR")
                    arrayfilename=$(printf "%s\nSRB2Kart VR Source Code (zip)\nSRB2Kart VR Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2KARTVR" | gawk -F'/' '{print $NF}')")

                elif [ "$OPTURL" = "SRB2KartSwitch" ]; then

                    SRB2KARTSWITCH=$(curl -s "https://api.github.com/repos/heyjoeway/Kart-Public/releases" | gawk -F'"' '/browser_download_url.*./ {print $4}')
                    SOURCECODEZIP="https://api.github.com/repos/heyjoeway/Kart-Public/zipball"
                    SOURCECODETAR="https://api.github.com/repos/heyjoeway/Kart-Public/tarball"
                    arrayfile=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR\nBack2Cat\nBack2Addon\nDone" "$SRB2KARTSWITCH")
                    arrayfilename=$(printf "%s\nSRB2Kart Switch Source Code (zip)\nSRB2Kart Switch Source Code (tar.gz)\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$(printf "%s\n" "$SRB2KARTSWITCH" | gawk -F'/' '{print $NF}')")

                elif [ -z "$LATEST" ] && [ -z "$arrayattachment" ]; then

                    arrayfile=$(printf "Back2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "$BACK2CAT\n$BACK2ADDON\n$DONE")

                elif [ -z "$LATEST" ] && [ -n "$arrayattachment" ]; then

                    arrayfile=$(printf "%s\nBack2Cat\nBack2Addon\nDone" "$arrayattachment")
                    arrayfilename=$(printf "%s\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$arrayattachmentname")

                elif [ -n "$LATEST" ] && [ -z "$arrayattachment" ]; then

                    arrayfile=$(printf "$LATEST\nBack2Cat\nBack2Addon\nDone")
                    arrayfilename=$(printf "$LATESTNAME\n$BACK2CAT\n$BACK2ADDON\n$DONE")

                else

                    arrayfile=$(printf "$LATEST\n%s\nBack2Cat\nBack2Addon\nDone" "$arrayattachment")
                    arrayfilename=$(printf "$LATESTNAME\n%s\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$arrayattachmentname")

                fi

            fi

        fi

        count=$(printf "%s\n" "$arrayfile" | wc -l)
        n=""
        printf "%s\n" "$arrayfilename" | gawk '{print NR")", $0}'
        while true; do

            printf "#? "
            read -r n

            if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

                OPTFILE=$(printf "%s\n" "$arrayfile" | gawk 'NR=='"${n}"'')
                OPTFILENAME=$(printf "%s\n" "$arrayfilename" | gawk 'NR=='"${n}"'')

                if [ "$OPTFILE" = "Back2Addon" ]; then
                    clear

                    if [ "$REUSABLE" = 1 ]; then

                        if [ "$CHARACTER" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$MAP" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$GAMETYPE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$ASSET" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$LUA" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$PLAYERCOLOR" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$MISC" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$SOFTWARE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$BUILD" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$KARTCHARACTER" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        elif [ "$KARTMAP" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        elif [ "$KARTMISC" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        elif [ "$KARTBUILD" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        fi

                    else

                        if [ "$CHARACTER" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$MAP" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$GAMETYPE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$ASSET" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$LUA" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$PLAYERCOLOR" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$MISC" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$SOFTWARE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$BUILD" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$KARTCHARACTER" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        elif [ "$KARTMAP" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        elif [ "$KARTMISC" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        elif [ "$KARTBUILD" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=1 PAGECODE="$PAGECODE" arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        fi

                    fi

                elif [ "$OPTFILE" = "Back2Cat" ]; then

                    clear

                    if [ "$REUSABLE" = 1 ]; then

                        if [ "$CHARACTER" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$MAP" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$GAMETYPE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$ASSET" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$LUA" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$PLAYERCOLOR" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$MISC" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$SOFTWARE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$BUILD" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0"

                        elif [ "$KARTCHARACTER" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        elif [ "$KARTMAP" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        elif [ "$KARTMISC" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        elif [ "$KARTBUILD" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --kart

                        fi

                    else

                        if [ "$CHARACTER" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$MAP" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$GAMETYPE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$ASSET" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$LUA" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$PLAYERCOLOR" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$MISC" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$SOFTWARE" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$BUILD" = 1 ]; then

                            unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=0 arrayfile="" arrayfilename="" FILES=0 exec "$0"

                        elif [ "$KARTCHARACTER" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        elif [ "$KARTMAP" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        elif [ "$KARTMISC" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        elif [ "$KARTBUILD" = 1 ]; then

                            unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --kart

                        fi

                    fi

                elif [ "$OPTFILE" = "Back2SearchResult" ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        if [ "$REUSABLE" = 1 ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --search-user

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --search-user

                        fi

                    else

                        if [ "$REUSABLE" = 1 ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --search

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --search

                        fi

                    fi

                elif [ "$OPTFILE" = "Back2Search" ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        if [ "$REUSABLE" = 1 ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --search-user

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --search-user

                        fi

                    else

                        if [ "$REUSABLE" = 1 ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 REUSABLE=1 exec "$0" --search

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 arrayfile="" arrayfilename="" FILES=0 exec "$0" --search

                        fi

                    fi

                elif [ "$OPTFILE" = "Done" ]; then

                    dl

                else

                    if [ "$OPTURL" = "SRB2" ] || [ "$OPTURL" = "SRB2NetPlus" ] || [ "$OPTURL" = "SRB2Android" ] || [ "$OPTURL" = "SRB2Switch" ] || [ "$OPTURL" = "SRB2-2.1" ] || [ "$OPTURL" = "SRB2-2.1-Legacy" ] || [ "$OPTURL" = "SRB2-2.1-MegaDrive" ] || [ "$OPTURL" = "SRB2Kart" ] || [ "$OPTURL" = "SRB2KartSwitch" ]; then

                        FILELISTTMP="$OPTFILE"

                    elif [ "$OPTURL" = "SRB2UncappedPlus" ]; then

                        if [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/git.do.srb2.org/ {print}')" ]; then

                            FILELISTTMP="$OPTFILE"

                        else

                            FILELISTTMP="http://srb2.mooo.com/srb2builds/uncapped-plus/$OPTFILE"

                        fi

                    elif [ "$OPTURL" = "SRB2VR" ]; then

                        if [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/git.do.srb2.org/ {print}')" ]; then

                            FILELISTTMP="$OPTFILE"

                        else

                            FILELISTTMP="https://git.do.srb2.org/chreas/SRB2/$OPTFILE"

                        fi

                    elif [ "$OPTURL" = "SRB2Persona" ]; then

                        if [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/dropbox.com/ {print}')" ] || [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/git.do.srb2.org/ {print}')" ] || [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/drive.google.com/ {print}')" ]; then

                            FILELISTTMP="$OPTFILE"

                        else

                            FILELISTTMP="https://mb.srb2.org/$OPTFILE"

                        fi

                    elif [ "$OPTURL" = "SRB2Archive" ]; then

                        FILELISTTMP="https://files.srb2.org/srb2.org/history/$OPTFILE"

                    elif [ "$OPTURL" = "SRB2KartMoeMansion" ]; then

                        if [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/gitlab.com/ {print}')" ] || [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/github.com/ {print}')" ]; then

                            FILELISTTMP="$OPTFILE"

                        else

                            FILELISTTMP="https://kart.moe/moe-mansion/64-bit/$OPTFILE"

                        fi

                    elif [ "$OPTURL" = "SRB2KartVR" ]; then

                        if [ -n "$(printf "%s\n" "$OPTFILE" | gawk '/gitlab.com/ {print}')" ]; then

                            FILELISTTMP="$OPTFILE"

                        else

                            FILELISTTMP="https://gitlab.com/cschoenig/kart-public/$OPTFILE"

                        fi

                    else

                        FILELISTTMP="https://mb.srb2.org/$OPTFILE"

                    fi

                    FILELIST="$FILELIST
$FILELISTTMP"
                    FILELIST=$(printf "%s\n" "$FILELIST" | gawk '!a[$0]++')
                    FILELISTNAMETMP="$OPTFILENAME"
                    FILELISTNAME="$FILELISTNAME
$FILELISTNAMETMP"
                    FILELISTNAME=$(printf "%s\n" "$FILELISTNAME" | gawk '!a[$0]++')

                fi
                break

            else

                printf "$NOTICE\n%s\n\e[0m" "No file has been chosen."
                exit

            fi

        done

    elif [ "$OPTURL" = "Next" ]; then

        clear

        if [ "$SEARCH" = 1 ]; then

            arraynextpage=$(curl -s "$SEARCHURL&page=$((PAGE + 1))" | gawk -F'<a href="|</a>' '/addons/ {split($2,a,"\""); print a[1]}' | gawk -F'/' '!/\/addons\/$|latest-reviews|categories/ && NF {print $3}')

        else

            arraynextpage=$(curl -s "$CATURL=$((PAGE + 1))" | gawk -F'"|/updates|/addons/' '/<dd>/ {print $3}' | gawk 'NF')

        fi

        if [ -n "$arraynextpage" ]; then

            if [ "$REUSABLE" = 1 ]; then

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE="$CHARACTERPAGE" CHARACTER=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE="$MAPPAGE" MAP=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE="$GAMETYPEPAGE" GAMETYPE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE="$ASSETPAGE" ASSET=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE="$LUAPAGE" LUA=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE="$PLAYERCOLORPAGE" PLAYERCOLOR=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE="$MISCPAGE" MISC=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE="$SOFTWAREPAGE" SOFTWARE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE="$BUILDPAGE" BUILD=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE="$KARTCHARACTERPAGE" KARTCHARACTER=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE="$KARTMAPPAGE" KARTMAP=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE="$KARTMISCPAGE" KARTMISC=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE="$KARTBUILDPAGE" KARTBUILD=1 FILES=0 REUSABLE=1 exec "$0" --kart

                fi

            else

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE="$CHARACTERPAGE" CHARACTER=1 FILES=0 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE="$MAPPAGE" MAP=1 FILES=0 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE="$GAMETYPEPAGE" GAMETYPE=1 FILES=0 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE="$ASSETPAGE" ASSET=1 FILES=0 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE="$LUAPAGE" LUA=1 FILES=0 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE="$PLAYERCOLORPAGE" PLAYERCOLOR=1 FILES=0 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE="$MISCPAGE" MISC=1 FILES=0 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE="$SOFTWAREPAGE" SOFTWARE=1 FILES=0 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE="$BUILDPAGE" BUILD=1 FILES=0 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE="$KARTCHARACTERPAGE" KARTCHARACTER=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE="$KARTMAPPAGE" KARTMAP=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE="$KARTMISCPAGE" KARTMISC=1 FILES=0 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE="$KARTBUILDPAGE" KARTBUILD=1 FILES=0 exec "$0" --kart

                fi

            fi

        else

            if [ "$REUSABLE" = 1 ]; then

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=1 FILES=0 REUSABLE=1 exec "$0" --kart

                fi

            else

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=1 FILES=0 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=1 FILES=0 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=1 FILES=0 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=1 FILES=0 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=1 FILES=0 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=1 FILES=0 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=1 FILES=0 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=1 FILES=0 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=1 FILES=0 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=1 FILES=0 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=1 FILES=0 exec "$0" --kart

                fi

            fi

        fi

    elif [ "$OPTURL" = "Prev" ]; then

        clear

        if [ "$SEARCH" = 1 ]; then

            arrayprevpage=$(printf "%s\nPrev\nNext\nBack2Search\nDone" "$(curl -s "$SEARCHURL&page=$((PAGE - 1))" | gawk -F'<a href="|</a>' '/addons/ {split($2,a,"\""); print a[1]}' | gawk -F'/' '!/\/addons\/$|latest-reviews|categories/ && NF {print $3}')")

        elif [ "$BUILD" = 1 ]; then

            arrayprevpage=$(printf "SRB2\nSRB2UncappedPlus\nSRB2NetPlus\nSRB2VR\nSRB2Persona\nSRB2Android\nSRB2Switch\nSRB2-2.1\nSRB2-2.1-Legacy\nSRB2-2.1-MegaDrive\nSRB2Archive\n%s\nPrev\nNext\nBack2Cat\nDone" "$(curl -s "$CATURL=$((PAGE - 1))" | gawk -F'"|/updates|/addons/' '/<dd>/ {print $3}' | gawk 'NF')")

        elif [ "$KARTBUILD" = 1 ]; then

            arrayprevpage=$(printf "SRB2Kart\nSRB2KartMoeMansion\nSRB2KartVR\nSRB2KartSwitch\n%s\nPrev\nNext\nBack2Cat\nDone" "$(curl -s "$CATURL=$((PAGE - 1))" | gawk -F'"|/updates|/addons/' '/<dd>/ {print $3}' | gawk 'NF')")

        else

            arrayprevpage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(curl -s "$CATURL=$((PAGE - 1))" | gawk -F'"|/updates|/addons/' '/<dd>/ {print $3}' | gawk 'NF')")

        fi

        if [ "$arraypage" = "$arrayprevpage" ]; then

            if [ "$REUSABLE" = 1 ]; then

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=1 FILES=0 REUSABLE=1 exec "$0" --kart

                fi

            else

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=1 FILES=0 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=1 FILES=0 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=1 FILES=0 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=1 FILES=0 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=1 FILES=0 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=1 FILES=0 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=1 FILES=0 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=1 FILES=0 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=1 FILES=0 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=1 FILES=0 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=1 FILES=0 exec "$0" --kart

                fi

            fi

        else

            if [ "$REUSABLE" = 1 ]; then

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 2)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 REUSABLE=1 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 2)) CHARACTER=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 2)) MAP=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 2)) GAMETYPE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 2)) ASSET=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 2)) LUA=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 2)) PLAYERCOLOR=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 2)) MISC=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 2)) SOFTWARE=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 2)) BUILD=1 FILES=0 REUSABLE=1 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 2)) KARTCHARACTER=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 2)) KARTMAP=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 2)) KARTMISC=1 FILES=0 REUSABLE=1 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 2)) KARTBUILD=1 FILES=0 REUSABLE=1 exec "$0" --kart

                fi

            else

                if [ "$SEARCH" = 1 ]; then

                    if [ -n "$SEARCHQUERYUSER" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 1)) SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 FILES=0 exec "$0" --search-user

                    else

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE=$((SEARCHPAGE - 2)) SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 FILES=0 exec "$0" --search

                    fi

                elif [ "$CHARACTER" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 2)) CHARACTER=1 FILES=0 exec "$0"

                elif [ "$MAP" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 2)) MAP=1 FILES=0 exec "$0"

                elif [ "$GAMETYPE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 2)) GAMETYPE=1 FILES=0 exec "$0"

                elif [ "$ASSET" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 2)) ASSET=1 FILES=0 exec "$0"

                elif [ "$LUA" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 2)) LUA=1 FILES=0 exec "$0"

                elif [ "$PLAYERCOLOR" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 2)) PLAYERCOLOR=1 FILES=0 exec "$0"

                elif [ "$MISC" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 2)) MISC=1 FILES=0 exec "$0"

                elif [ "$SOFTWARE" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 2)) SOFTWARE=1 FILES=0 exec "$0"

                elif [ "$BUILD" = 1 ]; then

                    unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 2)) BUILD=1 FILES=0 exec "$0"

                elif [ "$KARTCHARACTER" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 2)) KARTCHARACTER=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMAP" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 2)) KARTMAP=1 FILES=0 exec "$0" --kart

                elif [ "$KARTMISC" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 2)) KARTMISC=1 FILES=0 exec "$0" --kart

                elif [ "$KARTBUILD" = 1 ]; then

                    unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 2)) KARTBUILD=1 FILES=0 exec "$0" --kart

                fi

            fi

        fi

    elif [ "$OPTURL" = "Back2Cat" ]; then

        clear

        if [ "$REUSABLE" = 1 ]; then

            if [ "$CHARACTER" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$MAP" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$GAMETYPE" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$ASSET" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$LUA" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$PLAYERCOLOR" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$MISC" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$SOFTWARE" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$BUILD" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=0 FILES=0 REUSABLE=1 exec "$0"

            elif [ "$KARTCHARACTER" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=0 FILES=0 REUSABLE=1 exec "$0" --kart

            elif [ "$KARTMAP" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=0 FILES=0 REUSABLE=1 exec "$0" --kart

            elif [ "$KARTMISC" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=0 FILES=0 REUSABLE=1 exec "$0" --kart

            elif [ "$KARTBUILD" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=0 FILES=0 REUSABLE=1 exec "$0" --kart

            fi

        else

            if [ "$CHARACTER" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" CHARACTERPAGE=$((CHARACTERPAGE - 1)) CHARACTER=0 FILES=0 exec "$0"

            elif [ "$MAP" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MAPPAGE=$((MAPPAGE - 1)) MAP=0 FILES=0 exec "$0"

            elif [ "$GAMETYPE" = 1 ]; then
                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" GAMETYPEPAGE=$((GAMETYPEPAGE - 1)) GAMETYPE=0 FILES=0 exec "$0"

            elif [ "$ASSET" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" ASSETPAGE=$((ASSETPAGE - 1)) ASSET=0 FILES=0 exec "$0"

            elif [ "$LUA" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" LUAPAGE=$((LUAPAGE - 1)) LUA=0 FILES=0 exec "$0"

            elif [ "$PLAYERCOLOR" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PLAYERCOLORPAGE=$((PLAYERCOLORPAGE - 1)) PLAYERCOLOR=0 FILES=0 exec "$0"

            elif [ "$MISC" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" MISCPAGE=$((MISCPAGE - 1)) MISC=0 FILES=0 exec "$0"

            elif [ "$SOFTWARE" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SOFTWAREPAGE=$((SOFTWAREPAGE - 1)) SOFTWARE=0 FILES=0 exec "$0"

            elif [ "$BUILD" = 1 ]; then

                unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" BUILDPAGE=$((BUILDPAGE - 1)) BUILD=0 FILES=0 exec "$0"

            elif [ "$KARTCHARACTER" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTCHARACTERPAGE=$((KARTCHARACTERPAGE - 1)) KARTCHARACTER=0 FILES=0 exec "$0" --kart

            elif [ "$KARTMAP" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMAPPAGE=$((KARTMAPPAGE - 1)) KARTMAP=0 FILES=0 exec "$0" --kart

            elif [ "$KARTMISC" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTMISCPAGE=$((KARTMISCPAGE - 1)) KARTMISC=0 FILES=0 exec "$0" --kart

            elif [ "$KARTBUILD" = 1 ]; then

                unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" KARTBUILDPAGE=$((KARTBUILDPAGE - 1)) KARTBUILD=0 FILES=0 exec "$0" --kart

            fi

        fi

    elif [ "$OPTURL" = "Back2Search" ]; then

        if [ -n "$SEARCHQUERYUSER" ]; then

            if [ "$REUSABLE" = 1 ]; then

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 FILES=0 REUSABLE=1 exec "$0" --search-user

            else

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 FILES=0 exec "$0" --search-user

            fi

        else

            if [ "$REUSABLE" = 1 ]; then

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 FILES=0 REUSABLE=1 exec "$0" --search

            else

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="" SEARCHURL="" SEARCH=0 FILES=0 exec "$0" --search

            fi

        fi

    elif [ "$OPTURL" = "Done" ]; then

        dl

    fi
}

dl() {
    # Download files when done with selecting.
    if [ -n "$DIRECTORY" ]; then

        printf "\n%s\n" "Downloading chosen files. Please wait.."

        for i in $FILELIST; do

            FILENAME="$(curl -X GET -LIs "$i" | gawk -F'=|;' '/content-disposition:/ {gsub("\r|\"","");print $3}')"

            if [ -n "$FILENAME" ]; then

                COLUMNS=27 curl -#LC - "$i" -o "$FILENAME" --output-dir "$DIRECTORY" 2>&1 &

            elif [ -z "$FILENAME" ]; then

                COLUMNS=27 curl -#LOC - "$i" --output-dir "$DIRECTORY" 2>&1 &

            fi

        done | cat
        exit

    else

        printf "\n%s\n" "Downloading chosen files. Please wait.."

        for i in $FILELIST; do

            FILENAME="$(curl -X GET -LIs "$i" | gawk -F'=|;' '/content-disposition:/ {gsub("\r|\"","");print $3}')"

            if [ -n "$FILENAME" ]; then

                COLUMNS=27 curl -#LC - "$i" -o "$FILENAME" 2>&1 &

            elif [ -z "$FILENAME" ]; then

                COLUMNS=27 curl -#LOC - "$i" 2>&1 &

            fi

        done | cat
        exit

    fi

}

dlanother() {
    # Making sure to stack list of selected files ready to download.
    clear
    printf "\033[1m%s\n\033[0m" "Filelist: $FILELISTNAME"

    # Download on current path or typed from "srb2dl [path to download files]".
    if [ -z "$DIRECTORY" ]; then

        printf "\033[1m\n%s\n\033[0m" "Directory: $(pwd)"

    else

        printf "\033[1m\n%s\n\033[0m" "Directory:
$DIRECTORY"

    fi

    printf "\033[1m\033[34m\n%s\n\033[0m" "Do you want to download other stuff?"
    while

        for loop in "Yes" "No"; do printf "%s\n" "$((i += 1))) $loop"; done
        printf '#? '
        read -r choose
    do

        unset i
        case $choose in

            "1")

                if [ "$REUSABLE" = 1 ]; then

                    if [ "$SEARCH" = 1 ]; then

                        if [ -n "$SEARCHQUERYUSER" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0" --search-user

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0" --search

                        fi

                    elif [ "$CHARACTER" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" CHARACTERPAGE="$CHARACTERPAGE" CHARACTER=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$MAP" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" MAPPAGE="$MAPPAGE" MAP=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$GAMETYPE" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" GAMETYPEPAGE="$GAMETYPEPAGE" GAMETYPE=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$ASSET" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" ASSETPAGE="$ASSETPAGE" ASSET=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$LUA" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" LUAPAGE="$LUAPAGE" LUA=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$PLAYERCOLOR" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" PLAYERCOLORPAGE="$PLAYERCOLORPAGE" PLAYERCOLOR=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$MISC" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" MISCPAGE="$MISCPAGE" MISC=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$SOFTWARE" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" SOFTWAREPAGE="$SOFTWAREPAGE" SOFTWARE=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$BUILD" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" BUILDPAGE="$BUILDPAGE" BUILD=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" OPTURL="$OPTURL" FILES=1 REUSABLE=1 exec "$0"

                    elif [ "$KARTCHARACTER" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTCHARACTERPAGE="$KARTCHARACTERPAGE" KARTCHARACTER=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0" --kart

                    elif [ "$KARTMAP" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTMAPPAGE="$KARTMAPPAGE" KARTMAP=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0" --kart

                    elif [ "$KARTMISC" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTMISCPAGE="$KARTMISCPAGE" KARTMISC=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 REUSABLE=1 exec "$0" --kart

                    elif [ "$KARTBUILD" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTBUILDPAGE="$KARTBUILDPAGE" KARTBUILD=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" OPTURL="$OPTURL" FILES=1 REUSABLE=1 exec "$0" --kart

                    fi

                else

                    if [ "$SEARCH" = 1 ]; then

                        if [ -n "$SEARCHQUERYUSER" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERYUSER="$SEARCHQUERYUSER" SEARCH=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0" --search-user

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" SEARCHPAGE="$SEARCHPAGE" SEARCHURL="$SEARCHURL" SEARCHQUERY="$SEARCHQUERY" SEARCH=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0" --search

                        fi

                    elif [ "$OLD3" = 1 ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$URL" BACK2ADDONURL="" BACK2ADDONURL2="$BACK2ADDONURL2" OLD=1 OLD2=1 OLD3=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" exec "$0" --old

                    elif [ "$OLD" = 1 ] && [ -z "$OLD3" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$URL" BACK2ADDONURL="$BACK2ADDONURL" BACK2ADDONURL2="" OLD=1 OLD2=1 OLD3="" arrayfile="$arrayfile" arrayfilename="$arrayfilename" exec "$0" --old

                    elif [ "$CHARACTER" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" CHARACTERPAGE="$CHARACTERPAGE" CHARACTER=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$MAP" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" MAPPAGE="$MAPPAGE" MAP=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$GAMETYPE" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" GAMETYPEPAGE="$GAMETYPEPAGE" GAMETYPE=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$ASSET" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" ASSETPAGE="$ASSETPAGE" ASSET=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$LUA" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" LUAPAGE="$LUAPAGE" LUA=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$PLAYERCOLOR" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" PLAYERCOLORPAGE="$PLAYERCOLORPAGE" PLAYERCOLOR=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$MISC" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" MISCPAGE="$MISCPAGE" MISC=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$SOFTWARE" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" SOFTWAREPAGE="$SOFTWAREPAGE" SOFTWARE=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0"

                    elif [ "$BUILD" = 1 ]; then

                        unset CHARACTER MAP GAMETYPE ASSET LUA PLAYERCOLOR MISC SOFTWARE BUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" BUILDPAGE="$BUILDPAGE" BUILD=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" OPTURL="$OPTURL" FILES=1 exec "$0"

                    elif [ "$KARTCHARACTER" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTCHARACTERPAGE="$KARTCHARACTERPAGE" KARTCHARACTER=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0" --kart

                    elif [ "$KARTMAP" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTMAPPAGE="$KARTMAPPAGE" KARTMAP=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0" --kart

                    elif [ "$KARTMISC" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTMISCPAGE="$KARTMISCPAGE" KARTMISC=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" FILES=1 exec "$0" --kart

                    elif [ "$KARTBUILD" = 1 ]; then

                        unset KARTCHARACTER KARTMAP KARTMISC KARTBUILD
                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" PAGECODE="$PAGECODE" KARTBUILDPAGE="$KARTBUILDPAGE" KARTBUILD=1 arrayfile="$arrayfile" arrayfilename="$arrayfilename" OPTURL="$OPTURL" FILES=1 exec "$0" --kart

                    fi

                fi
                ;;

            "2")

                dl
                ;;

        esac

    done
}

srb2logo() {
    cat << 'LOGO'
				                                      `````````````
				                              ``-://+ooooooooooooooo++//:-.``
				                         `.:/+oossssssssssssssssssssssoooooo+/:-`
				                      .:+oossssssssssssssssssssoo++/:::::::::-----.`
				     ``           `:+ossssssssssssssssssssoo+/:-----------....`````
				    `.//.      `-+osssssssssssssssssssoo+::://+-.---...````````
				   ``.-:++.  ./osssssssssssssssssssoo+//+//:--:/`.``````````
				   ``.--:/:-+ossssssssssssssssssso+//+/::/oo--::``````````
				   ``.---.+ossssssssssssssssssso++++:-/shhdy--::````````
				   ```-..+sssssssssssyhhhhhssssoo+-:oyydmmmy----`````
				   ````.:osssssssssshhhhhhhyso+/:---/shmmmms.--.````
				   ```.-:/osssssssssyhhhhys+/:--------+hmmd/---.`.:+++/:-.`
				   -//-.--:/+oooooo++++//::-------------sdh.---..-/osssssoo+:-`
				  `/:--------:::::::---..-::-..----------::----.--::+oossssssoo+:.
				  ..-.--------------.:odmNMMMNh/`--------------.------:://+oooossso/.
				  `-h/.-----------.+hmMMMMMMMMMMy.--------------------------:::/++ooo+-`
				   :ms`---------.:ymMMMMMMmmMMMMMy`-------------------------------:://++:`
				   -Nm-.-------./dNMMMMMN//++NMMMN:.-----------------------------------:::.
				   .mN+ ------.:hNMMMMMMh yM:yMMMMy.----------------------------------------`
				   `yMy `----..hNMMMMMMMs +N:oMMMMh`-----------------------------------------.
				    /Mm. `...`smMMMMMMMMo  ` oMMMMo.-------------------..........`````.......-.
				    `NN/  ```/dMMMMMMMMMy `  sMMMm-----------.....```````````````````````
				`:/. /Nh` ``/dMMMMMMMMMMN.```hMMM+`.----...```````````````````
				 /ymd.`/+/ydNMMMMMMMMMMMMh:.oNMN/```````````````````````
				  ``      oso+smMMMMMMMMMMMMMMy.``````````````````````
				      .//+hmmmdssdMMMMMMMMMNh/`````````````````````.---`
				      `/yydmmmmmdyshdhhhysssyhhyo.`````````````````-----.
				        -oydmmmmmmmddhhdddmmdy/+ds````````````````.------.
				          -ohddmmmmmmmdhhyyssoysdo`````````````````-------.
				            `:oyhddmmmddhhddmddy/` `````````````````.------.
				                .-/+osyyyso+/-`       ```````````````.------
				                                            ```````````.----.
				                                                ````````.----
				                                                    `````.---`
				                                                       ```.--.
				                                                         ```--
				                                                            `.
LOGO
}

srb2kartlogo() {
    cat << 'LOGO'
				                     `-+hhNMMMMMMMMMMMMMMNhhhs//``
			                        /sNMMMmdyyyssssssyyyyhhNMMMMMMMho:`
			                      /dMMMNo-`    ``         -dMMMMMMMMMMNy-`
			                    -dMMMNhy///:://///+++++/+yNMMMmdyosydNMMMm:
			                  `oNMMm+.    ---://:.``   +NMMmo.````````:dMMMo
			                  hMMMNs:-----/yyo:------/sNMMm/-----------+mMMMy
			                `hMMMy/.`````./.````...``+MMN:```.://:.`````.sMMMo
			               `yMMMy` `--` `:``.:::..`./dMMo``-ymhyydmo.````.hMMN-
			               oMMMms/:::/osssso++/////yNMNs+ommso++++ohNh++++oNMMs
			              -MMMh.       oy:         `NMs `hd.        /m+    oMMm
			              yMMMh/:::---:o:---::::::+dMNo:hm/---------:sNy:--sMMN-
			             :MMMy....::.`-/`.:/:-.```+MN/`oN-````````````oN:```sMMo
			             sMMN/`    `/-+-::.       +Md.-Nh             .hh. `+MMo
			             mMMm+/::::::sdo/::::::::+mMy/hMN+:::::::::::::oMs::sMMo
			            .NMMo`..`    --   `.--.`  dM``mMm`              ds  `MMo
			            oMMMy::/++/:-o/:/o+:----:yMM/+MMMh:-------------ym/:+MMo
			            oMMd/`````./:+/+-````````-mh.hMMMh.`````````````/m/`:MMo
			            oMMh:......./y/........../m/-mMMMd-`````````````:mo.+MMo
			            oMMh/:::-....o-...-:::-..----yhhhy:-------------:so-/MMo
			            oMM+   `.:-  +` .:-`                                .MMo
			            oMMd/:::::/o+y+o+/:::::::::::::::::::::::::::::::::/sMMo
			            oMM/        :h+`             ./++++++++++++++++++++smMMo
			            oMMho::--....o:..``.--.`````/NMMMNddddddddddddddddddddd-
			            oMMNs..-:/+:-+:.:+/:--------/mMd.`
			             mMy`      -//--:`          `hMm.
			             mMms::::::::sho::::::::::::+mMMdhhhhhhhhhhhhhhhhhhhhh+
			             mMN:`....    /`    ..`      .dMNmmmmmmmmmmmmmNMMNmNMMm
			             /MMd+:::+o+/:+o::/o/::::::::+mNs/::::::::::::yMNo:+NMm
			             :MMm-     `.///.::`         `-mh`````````````/Nh-`oMMm
			              yMN:        .os/            -dNs:          .yM: `mMMy
			              /MMMh/++++/:::o+:::/+/:::::::ohMd/::::::::sNMh::sMMM-
			               NMMo    `.::-`:` `:`         `ym:`      `oMy. `hMMy
			               :NMNh+::::::+oos/o/:::::::::::hmNmo::::+mNd+-/hMMM.
			                +MMMy`       `/s:     ```     `.odNmNmho.```oMMN/
			                 /NMMy-`````   `-`   `-`          ````   `:oMMM/
			                  /dMMMNd///+oos++/:/o/:::::::::::::::::oNMMMN:
			                    yMMMMy/.   `-/+::.                 .oMMMd.
			                     ./dMMMNdso++//+o:::::::::::::::/oyNMMd:
			                        .+yhMMMMMMNNNmdhhhyyyyyyyyhmNMMNo:
			                            ``-///shhhhhhNMMMMMMMdhho/-`
LOGO
}

srb2oldlogo() {
    cat << 'LOGO'

                                                       .----oooo/sssss/---oo----`..
                                                .`-o/ssssssssssssss/`--oo``ssssssssso-.
                       --`                 .-osssssssssssssssssss/--o.-/ss-.sssss/ooo----.
                      `-/sso`          .-osssssssssssssssssssss-.-/`-s `oss oss/o-----------`.
                      ---osss/      .-/ssssssssssssssssssssss-.-o`-ssh- --/--/-----------------`.
                      -----/ss/  .-osssssssssssssssssssssss-.-/`-ssshhs ---- ---------------------`
                      `-----``.--osssssssssssssssssssssss/--s``/ssshhhh ---- `------------------`````
                      `---. `--osssssssssssssssssssssssso`/-.osssshhhhh ----..-----```````````````...
                     .``..----/sssssssssssssssssssssssssssso``osshhhhh`.----` ````````````````..
                     .. -----/sssssssssssssssssssssssssssssssso--/hhh/ ------ ````````````.
                       -----ossssssssssssssssssssssssssssssssssss-.os `------ `..`````..
                      ------ossssssssssssssssssssssssssssssssssssss` -------- ```.....
                     ---------osssssssssssssssssshhhhhhhsssssssss/o---------- ----oo////-.
                   `------------oo/sssssssssssshhhhhhhhhhsssss/o----------------/sssssssss/-`
                  `------------------ooo/////////s/-------``------------------o/sssssssssssssso`
                  `` -`.`-----------------------`-/hhhhoohhso.`---------------o///sssssssssssssss-`
                  ` hMMo- --------------------`oshhoMMMMMMMMooo.-------------------oo//ssssssssssss/-
                   hMMMMh-.-----------------``hhoMMMMMMMMMMMMMMo`-----------------------oo//ssssssssss-
                  `MMMMMMh.`---------------.ohhoMMMMMMMMMMMMMMMM.----------------------------oo//ssssssso`
                  hMMMMMMMs -------------- /hhMMMMMMMMMMMMMMMMMMo.--------------------------------o///ssss/`
                  MMMMMMMMo.`------------ /hhMMMMMMMMMMMMMMMMMMMo.-------------------------------------o///so
                  MMMMMMMMMo -----------. hhMMMMMMMMMMMMMMMMMMMMo.------------------------------------------oo.
                  MMMMMMMMMo  ---------   oMMMMMMMMMMMMMMMMMMMMMo.---------------------------------------------.
                  MMMMMMMMM.   ------```  .MMMMMMMMMMMMMMMMMMMMM.-----------------------------------------------`
                  oMMMMMMMM   oo.```.-Mo   MMMMMMMMMMMMMMMMMMMMM ------------------------`````````````````````````
                  oMMMMMMMM   Mo-s//h.Mo   MMMMMMMMMMMMMMMMMMMMo`--------------````````````````````````.....
                   oMMMMMMMo  ..MMMMMh.   oMMMMMMMMMMMMMMMMMMMo -----------``````````````````````..
                   -MMMMMMMMo..oMMMMMMs``-MMMMMMMMMMMMMMMMMMMo`---------````````````````````..
                    -hhhhhhhhhoos-o/oshoMMMMMMMMMMMMMMMMMMMh-.--.`--```````````````````..
                     -ohoo-`.    hhhhh/o-/osoMMMMMMMMMMhsooohhhhhso.```````````````.  ..
                          ..--/shhhhhhhhhhhs/-/oooooo/-/shhhhhhhhhhh`.``````````.  .`````
                      .hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh-.```````.  ``````---`
                        shhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh-hhhhhhh-.`````````````-------
                         -shhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh/.hhhhhhh ````````````---------`
                           -sshhhhhhhhhhhhhhhhhhhhhhhhhhh--ohhhhhhh..`````````````---------
                             `ossshhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhs`.````````````````-------.
                                `-/ssssshhhhhhhhhhhhhhhhhhhhhhs/`.````````````````````------
                                    .--o/sssssssssssssssssso-`   ............```````````----
                                           ..`--------...                          ....```--.
                                                                                         ..-.
LOGO
}

case "$2" in

    -k | --kart)

        # Make variables to be remembered after rerunning script with "exec $0".
        if [ "$KARTCHARACTER" = 1 ]; then

            KARTCHARACTER=1

        elif [ "$KARTMAP" = 1 ]; then

            KARTMAP=1

        elif [ "$KARTMISC" = 1 ]; then

            KARTMISC=1

        elif [ "$KARTBUILD" = 1 ]; then

            KARTBUILD=1

        else

            KARTCHARACTER=0
            KARTMAP=0
            KARTMISC=0
            KARTBUILD=0
            FILES=0

            if ([ "$1" = "-r" ] || [ "$1" = "--reusable" ]) && [ -z "$DIRECTORY" ]; then

                REUSABLE=1
                shift
                DIRECTORY="$2"

            elif [ -z "$DIRECTORY" ]; then

                DIRECTORY="$2"

            else

                DIRECTORY="$DIRECTORY"

            fi

        fi

        if [ "$KARTCHARACTER" = 0 ] || [ "$KARTMAP" = 0 ] || [ "$KARTMISC" = 0 ] || [ "$KARTBUILD" = 0 ]; then

            # Choose SRB2 Kart category.
            while

                clear
                srb2kartlogo
                printf "\033[1m\033[34m%s\n\033[0m" "Please choose category by typing number and then pressing enter. Press enter or ctrl+c to quit."
                for loop in "Kart Characters" "Kart Maps" "Kart Miscellaneous" "Kart Builds" "$(printf "\033[1m\033[34m%s\033[0m" "Done")"; do printf "%s\n" "$((i += 1))) $loop"; done
                printf "#? "
                read -r choose
            do

                unset i

                if [ -n "$choose" ]; then

                    case $choose in

                        "1")

                            KARTCHARACTER=1
                            break
                            ;;

                        "2")

                            KARTMAP=1
                            break
                            ;;

                        "3")

                            KARTMISC=1
                            break
                            ;;

                        "4")

                            KARTBUILD=1
                            break
                            ;;

                        "5")

                            dl
                            ;;

                    esac

                else

                    printf "$NOTICE\n%s\n\e[0m" "No category has been chosen."
                    exit

                fi

            done

        fi

        if [ "$KARTCHARACTER" = 1 ]; then

            KARTCHARACTERPAGE=$((KARTCHARACTERPAGE + 1)) PAGE="$KARTCHARACTERPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-characters.13/?page" choosepage

        elif [ "$KARTMAP" = 1 ]; then

            KARTMAPPAGE=$((KARTMAPPAGE + 1)) PAGE="$KARTMAPPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-maps.14/?page" choosepage

        elif [ "$KARTMISC" = 1 ]; then

            KARTMISCPAGE=$((KARTMISCPAGE + 1)) PAGE="$KARTMISCPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-miscellaneous.15/?page" choosepage

        elif [ "$KARTBUILD" = 1 ]; then

            KARTBUILDPAGE=$((KARTBUILDPAGE + 1)) PAGE="$KARTBUILDPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-custom-builds.16/?page" choosepage

        fi

        dlanother
        ;;

    -r | --reusable)

        # Reusable variable for various other script's options.
        REUSABLE=1
        ;;

    -s | --search)

        # Make variables to be remembered after rerunning script with "exec $0".
        if [ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]; then

            SEARCH=1
            FILES=1
            SEARCHURL="$SEARCHURL"

        else

            SEARCH=1
            FILES=0
            SEARCHURL="$SEARCHURL"

        fi

        if ([ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]) || ([ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -n "$SEARCHURL" ]); then

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        elif [ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -z "$SEARCHURL" ]; then

            if [ -n "$3" ]; then

                if [ "$(printf "%s\n" "$*" | gawk '{print $1}')" = "-r" ] || [ "$(printf "%s\n" "$*" | gawk '{print $1}')" = "--reusable" ]; then

                    REUSABLE=1
                    shift 2
                    OPTS="$*"
                    ENDARG=$(printf "%s\n" "$OPTS" | gawk 'match($NF, /\//) {print substr($NF, RSTART, RLENGTH)}')

                    if [ "$ENDARG" = "/" ]; then

                        SEARCHQUERY="${OPTS% *}"
                        DIRECTORY="${OPTS##* }"

                    else

                        SEARCHQUERY="$*"
                        DIRECTORY=$(pwd)

                    fi

                fi

            else

                printf "\n%s\n" "Please enter resource to search."
                read -r SEARCHQUERY

            fi

            # Search resource functionality.
            WEBKITRANDOM=$(date | md5sum | gawk '{print substr($1,length($1)-14)}')
            SEARCHCOOKIES=$(curl -is https://mb.srb2.org/search | gawk -F'=|"|;' '/xf_csrf|xfToken/ {gsub(/^[\t]+/,""); print $2$9}')
            XF_CSRF=$(printf "%s\n" "xf_csrf=$SEARCHCOOKIES" | head -n1)
            XFTOKEN=$(printf "%s\n" "$SEARCHCOOKIES" | tail -n1)
            SEARCHFORM="$(printf '%b_' '------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="keywords"\r\n\r\n'"$SEARCHQUERY"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[users]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[newer_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[older_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[prefixes][]"\r\n\r\n'"$REUSABLE"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[categories][]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[child_categories]"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="order"\r\n\r\ndate\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="search_type"\r\n\r\nresource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfRequestUri"\r\n\r\n/search/?type=resource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfWithData"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfResponseType"\r\n\r\njson\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'--\r\n')"
            SEARCHFORM="${SEARCHFORM%_}"
            SEARCHURL=$(curl -s 'https://mb.srb2.org/search/search' -H 'accept: application/json, text/javascript' -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary'"$WEBKITRANDOM"'' -H 'cookie: '"$XF_CSRF"'' --data-binary "$SEARCHFORM" --compressed | gawk -F'"' '/redirect/ {print $4}')

            if [ "$REUSABLE" = 1 ]; then

                SEARCHURL=$(printf "%s\n" "$SEARCHURL" | gawk '{gsub(/\[/,"\\[") gsub(/\]/,"\\]");print}')

            fi

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        fi
        ;;

    -u | --search-user)

        if [ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]; then

            SEARCH=1
            FILES=1
            SEARCHURL="$SEARCHURL"

        else

            SEARCH=1
            FILES=0
            SEARCHURL="$SEARCHURL"

        fi

        if ([ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]) || ([ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -n "$SEARCHURL" ]); then

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        elif [ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -z "$SEARCHURL" ]; then

            if [ -n "$3" ]; then

                # Checks to make sure --reusable option does not become part of search query.
                if [ "$(printf "%s\n" "$*" | gawk '{print $1}')" = "-r" ] || [ "$(printf "%s\n" "$*" | gawk '{print $1}')" = "--reusable" ]; then

                    REUSABLE=1
                    shift 2
                    OPTS="$*"
                    ENDARG=$(printf "%s\n" "$OPTS" | gawk 'match($NF, /\//) {print substr($NF, RSTART, RLENGTH)}')

                    if [ "$ENDARG" = "/" ]; then

                        SEARCHQUERYUSER="${OPTS% *}"
                        DIRECTORY="${OPTS##* }"

                    else

                        SEARCHQUERYUSER="$*"
                        DIRECTORY=$(pwd)

                    fi

                fi

            else

                printf "\n%s\n" "Please enter resource to search."
                read -r SEARCHQUERYUSER

            fi

            # Search user functionality.
            WEBKITRANDOM=$(date | md5sum | gawk '{print substr($1,length($1)-14)}')
            SEARCHCOOKIES=$(curl -is https://mb.srb2.org/search | gawk -F'=|"|;' '/xf_csrf|xfToken/ {gsub(/^[\t]+/,""); print $2$9}')
            XF_CSRF=$(printf "%s\n" "xf_csrf=$SEARCHCOOKIES" | head -n1)
            XFTOKEN=$(printf "%s\n" "$SEARCHCOOKIES" | tail -n1)
            SEARCHFORM="$(printf '%b_' '------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="keywords"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[users]"\r\n\r\n'"$SEARCHQUERYUSER"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[newer_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[older_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[prefixes][]"\r\n\r\n'"$REUSABLE"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[categories][]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[child_categories]"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="order"\r\n\r\ndate\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="search_type"\r\n\r\nresource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfRequestUri"\r\n\r\n/search/?type=resource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfWithData"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfResponseType"\r\n\r\njson\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'--\r\n')"
            SEARCHFORM="${SEARCHFORM%_}"
            SEARCHURL=$(curl -s 'https://mb.srb2.org/search/search' -H 'accept: application/json, text/javascript' -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary'"$WEBKITRANDOM"'' -H 'cookie: '"$XF_CSRF"'' --data-binary "$SEARCHFORM" --compressed | gawk -F'"' '/redirect/ {print $4}')

            if [ "$REUSABLE" = 1 ]; then

                SEARCHURL=$(printf "%s\n" "$SEARCHURL" | gawk '{gsub(/\[/,"\\[") gsub(/\]/,"\\]");print}')

            fi

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        fi
        ;;

esac

case "$1" in

    -h | --help)

        printf "%s\n" "
Download SRB2/SRB2Kart addons, software and builds.

Usage: srb2dl [OPTIONS] <search-query> <directory-path>
  OPTIONS:
     -h, --help                             Show this help text.
     -k, --kart                             Go to SRB2Kart resources.
     -o, --old                              Go to archived resources for previous SRB2/SRB2Kart versions.
     -r, --reusable                         Filter resources by reusable.
     -s, --search         <search-query>    Search resources by keyword.
     -u, --search-user    <search-query>    Search resources by user.

  EXAMPLES:
     1. Show SRB2 resources and download them to chosen path:
	    srb2dl \"\$HOME/Downloads\"

     2. Go to SRB2Kart resources and download them to current directory:
	    srb2dl --kart

     3. Search for Sonic related content:
            srb2dl --search \"sonic\"

     4. Search for user's reusable content:
            srb2dl --search-user \"user123\" --reusable

     5. Go to archived resources for previous SRB2/SRB2Kart versions and download them to \"\$HOME/Downloads\" path (-r/--reusable option is not supported for -o/--old):
            srb2dl --old \"\$HOME/Downloads\"

  Previewing resources is available by setting \"export SRB2DLPREVIEW=1\" and optionally variable BROWSER (for example \"export BROWSER=firefox\") in shell configuration file. Default previewer is w3m, if installed.
"
        exit
        ;;

    -o | --old)

        if [ "$(printf "%s\n" "@" | gawk 'match($NF, /--/) {print substr($NF, RSTART, RLENGTH)}')" ]; then

            exit

        fi

        clear
        srb2oldlogo
        PAGE=$((OLDPAGE + 1))
        NEXT="\033[1m\033[34mNext Page $((PAGE + 1))\033[0m"
        PREV="\033[1m\033[34mPrevious Page $((PAGE - 1))\033[0m"
        BACK2CAT="\033[1m\033[34mBack to categories\033[0m"
        BACK2ADDON="\033[1m\033[34mBack to addons\033[0m"
        DONE="\033[1m\033[34mDone\033[0m"

        if [ -z "$DIRECTORY" ]; then

            DIRECTORY="$2"

        fi

        if [ -z "$OLD" ]; then

            # Choose categories for old versions of SRB2/SRB2Kart resources.
            PAGECODE=$(curl -Ls "https://mb.srb2.org")
            arraypage=$(printf "%s\nSRB2-2.1\nSRB2-2.1-Legacy\nSRB2Archive" "$(printf "%s\n" "$PAGECODE" | gawk -F'href="|"' '/Obsoleted *.* Releases \([0-9]*.*\)|Outdated *.* Releases \([0-9]*.*\)/ {print $2}')")
            arraypagename=$(printf "%s\nSRB2 2.1 Builds and Source Code\nSRB2 2.1 Legacy Builds and Source Code\nSRB/SRB2 Archived Versions" "$(printf "%s\n" "$PAGECODE" | gawk -F'<a href="/forums/*.*/" data-xf-init="element-tooltip" data-shortcut="node-description">|</a>' '/Obsoleted *.* Releases \([0-9]*.*\)|Outdated *.* Releases \([0-9]*.*\)/ {gsub("&amp;","\\&"); print $2}')")
            count="$(printf "%s\n" "$arraypage" | wc -l)"
            n=""
            printf "\033[1m\033[34m%s\n\033[0m" "Please choose SRB2 version by typing number and then pressing enter. Press enter or ctrl+c to quit."
            printf "%s\n" "$arraypagename" | gawk '{print NR")", $0}'
            while true; do

                printf "#? "
                read -r n

                if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then
                    OPTURL=$(printf "%s\n" "$arraypage" | gawk NR=="${n}")
                    URL="$OPTURL"
                    break

                else
                    printf "$NOTICE\n%s\n\e[0m" "No SRB2 version has been chosen."
                    exit

                fi

            done

        fi

        if [ -z "$OLD2" ]; then

            clear

            if [ -n "$(printf "%s\n" "$URL" | gawk '/obsoleted|outdated-releases-0-x-1-x.53/')" ]; then

                PAGECODE=$(curl -Ls "https://mb.srb2.org$URL?page=$PAGE")
                USERS=$(printf "%s\n" "$PAGECODE" | gawk -F'data-author="|">' '/data-author="/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print $2}')
                arraypage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F '<a href="|"' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {print $2}')")
                arraypagenametmp=$(printf "%s\n" "$(printf "%s\n" "$PAGECODE" | gawk -F'<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">|</a>' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print "\033[1m"$2"\033[0m"}')")
                arraypagename=$(printf "%s\n$PREV\n$NEXT\n$BACK2CAT\n$DONE" "$(
                    gawk -v left="$arraypagenametmp" -v right="$USERS" 'BEGIN{
split(left,l,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++)
{print l[i] " - " "\033[37mUser: "r[i]"\033[0m"}}'
                )")

                printf "\033[1m\033[34m%s\n\033[0m" "Please choose resource by typing number and then pressing enter. Press enter or ctrl+c to quit."

            elif [ "$OPTURL" = "SRB2-2.1" ]; then

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="" URL="SRB2-2.1" OLD=1 OLD2=1 OLD3="" FILES=0 exec "$0" --old

            elif [ "$OPTURL" = "SRB2-2.1-Legacy" ]; then

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="" URL="SRB2-2.1-Legacy" OLD=1 OLD2=1 OLD3="" FILES=0 exec "$0" --old

            elif [ "$OPTURL" = "SRB2Archive" ]; then

                FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="" URL="SRB2Archive" OLD=1 OLD2=1 OLD3="" FILES=0 exec "$0" --old

            else

                PAGECODE=$(curl -Ls "https://mb.srb2.org$URL?page=$PAGE")
                arraypage=$(printf "%s\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F'<a href="|"' '/<a href="*.*" data-xf-init="element-tooltip" data-shortcut="node-description">/ && !/Contest/ {print $2}')")
                arraypagename=$(printf "%s\n$BACK2CAT\n$DONE" "$(printf "%s\n" "$PAGECODE" | gawk -F'<a href="*.*" data-xf-init="element-tooltip" data-shortcut="node-description">|</a>' '/<a href="*.*" data-xf-init="element-tooltip" data-shortcut="node-description">/ && !/Contest/ {print $2}')")
                printf "\033[1m\033[34m%s\n\033[0m" "Please choose category by typing number and then pressing enter. Press enter or ctrl+c to quit."

            fi

            BACK2ADDONURL="$URL"
            count="$(printf "%s\n" "$arraypage" | wc -l)"
            n=""
            printf "%s\n" "$arraypagename" | gawk '{print NR")", $0}'

            while true; do

                printf "#? "
                read -r n

                if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

                    OPTURL=$(printf "%s\n" "$arraypage" | gawk NR=="${n}")

                    if [ "$OPTURL" = "Next" ] || [ "$OPTURL" = "Prev" ]; then

                        URL="$URL"

                    else

                        URL="$OPTURL"

                    fi

                    if [ "$OPTURL" = "Next" ]; then

                        PAGECODE=$(curl -Ls "https://mb.srb2.org$URL?page=$((PAGE + 1))")
                        arraynextpage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F '<a href="|"' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {print $2}')")

                        if [ "$arraynextpage" != "$arraypage" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="$PAGE" URL="$URL" OLD=1 OLD2="" OLD3="" FILES=0 exec "$0" --old

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$URL" OLD=1 OLD2="" OLD3="" FILES=0 exec "$0" --old

                        fi

                    elif [ "$OPTURL" = "Prev" ]; then

                        PAGECODE=$(curl -Ls "https://mb.srb2.org$URL?page=$((PAGE - 2))")
                        arrayprevpage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F '<a href="|"' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {print $2}')")

                        if [ "$arrayprevpage" = "$arraypage" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$URL" OLD=1 OLD2="" OLD3="" FILES=0 exec "$0" --old

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 2)) URL="$URL" OLD=1 OLD2="" OLD3="" FILES=0 exec "$0" --old

                        fi

                    elif [ "$OPTURL" = "Back2Cat" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="" URL="" OLD="" OLD2="" OLD3="" FILES=0 exec "$0" --old

                    elif [ "$OPTURL" = "Done" ]; then

                        dl

                    elif [ "$OPTURL" != "Next" ] || [ "$OPTURL" != "Prev" ] || [ "$OPTURL" != "Back2Cat" ]; then

                        break

                    fi

                else

                    printf "$NOTICE\n%s\n\e[0m" "No resource has been chosen."
                    exit

                fi

            done

        fi

        if [ -z "$OLD3" ]; then

            clear

            if [ -n "$(printf "%s\n" "$URL" | gawk '/forums/')" ]; then

                PAGECODE=$(curl -Ls "https://mb.srb2.org$URL?page=$PAGE")
                USERS=$(printf "%s\n" "$PAGECODE" | gawk -F'data-author="|">' '/data-author="/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print $2}')
                arraypage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F '<a href="|"' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {print $2}')")
                arraypagenametmp=$(printf "%s\n" "$(printf "%s\n" "$PAGECODE" | gawk -F'<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">|</a>' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {gsub("&#039;","\47") || gsub("&amp;","\\&") || gsub("&quot;","\"") || gsub("^.$",""); print "\033[1m"$2"\033[0m"}')")
                arraypagename=$(printf "%s\n$PREV\n$NEXT\n$BACK2CAT\n$DONE" "$(
                    gawk -v left="$arraypagenametmp" -v right="$USERS" 'BEGIN{
split(left,l,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++)
{print l[i] " - " "\033[37mUser: "r[i]"\033[0m"}}'
                )")

                count="$(printf "%s\n" "$arraypage" | wc -l)"
                printf "\033[1m\033[34m%s\n\033[0m" "Please choose resource by typing number and then pressing enter. Press enter or ctrl+c to quit."
                printf "%s\n" "$arraypagename" | gawk '{print NR")", $0}'

            elif [ -n "$(printf "%s\n" "$URL" | gawk '/threads/')" ] || [ "$URL" = "SRB2-2.1" ] || [ "$URL" = "SRB2-2.1-Legacy" ] || [ "$URL" = "SRB2Archive" ]; then

                if [ -z "$(printf "%s\n" "$arrayfile")" ]; then

                    # Browser's behaviour depends on set SRB2DLPREVIEW.
                    if [ "$SRB2DLPREVIEW" = 1 ] && [ "$URL" != "SRB2-2.1" ] && [ "$URL" != "SRB2-2.1-Legacy" ] && [ "$URL" != "SRB2Archive" ]; then

                        if [ -n "$BROWSER" ]; then

                            printf "%s\n\n" "Opening link to files."
                            "$BROWSER" "https://mb.srb2.org/$OPTURL" > /dev/null &

                        elif [ -x "/usr/bin/w3m" ]; then

                            w3m "https://mb.srb2.org/$OPTURL"

                        fi

                    fi

                    if [ "$URL" = "SRB2-2.1" ]; then

                        SRB2OLD21=$(curl -s "https://api.github.com/repos/STJr/SRB2/releases/19358575" | gawk -F'"' '/browser_download_url.*zip/ || /browser_download_url.*exe/ || /browser_download_url.*dmg/ {print $4}')
                        SOURCECODEZIP="https://api.github.com/repos/stjr/srb2/zipball/SRB2_release_2.1.25"
                        SOURCECODETAR="https://api.github.com/repos/stjr/srb2/tarball/SRB2_release_2.1.25"
                        arrayattachment=$(printf "%s\n$SOURCECODEZIP\n$SOURCECODETAR" "$SRB2OLD21")
                        arrayattachmentname=$(printf "%s\nSRB2 2.1 Source Code (zip)\nSRB2 2.1 Source Code (tar.gz)" "$(printf "%s\n" "$SRB2OLD21" | gawk -F'/' '{print $NF}')")

                    elif [ "$URL" = "SRB2-2.1-Legacy" ]; then

                        SOURCECODEZIP="https://api.github.com/repos/PandaSRC/srb2-legacy/zipball"
                        SOURCECODETAR="https://api.github.com/repos/PandaSRC/srb2-legacy/tarball"
                        arrayattachment=$(printf "$SOURCECODEZIP\n$SOURCECODETAR")
                        arrayattachmentname=$(printf "SRB2 2.1 Legacy Source Code (zip)\nSRB2 2.1 Legacy Source Code (tar.gz)")

                    elif [ "$URL" = "SRB2Archive" ]; then

                        ATTACHMENTCODE=$(curl -Ls "https://files.srb2.org/srb2.org/history")
                        arrayattachment=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'">|</a>' '(/.zip/ || /.exe/) && !/&gt;/ {print $3}')
                        arrayattachmentname=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'">|</a>' '(/.zip/ || /.exe/) && !/&gt;/ {print $3}')

                    else

                        ATTACHMENTCODE=$(curl -Ls "https://mb.srb2.org$URL")
                        arrayattachment=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'href="|"' '/attachments/ && (/.zip/ || /.7z/ || /.rar/ || /.pk3/ || /.wad/ || /.lua/ || /.exe/ || /.soc/ || /.ZIP/ || /.7Z/ || /.RAR/ || /.PK3/ || /.WAD/ || /.LUA/ || /.EXE/ || /.SOC/) && NF {print $4}' | gawk -F'/' '{print $2"/"$3}' | gawk '!/^\/$/ {print}')
                        arrayattachmentname=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'">|</span>' '/title/ {split($2,a,"<"); print a[1]}' | gawk '(/.zip$/ || /.7z$/ || /.rar$/ || /.pk3$/ || /.wad$/ || /.lua$/ || /.exe$/ || /.soc$/ || /.ZIP$/ || /.7Z$/ || /.RAR$/ || /.PK3$/ || /.WAD$/ || /.LUA$/ || /.EXE$/ || /.SOC$/) && NF')

                    fi

                    if [ -n "$arrayattachment" ] && ([ "$URL" = "SRB2-2.1" ] || [ "$URL" = "SRB2-2.1-Legacy" ] || [ "$URL" = "SRB2Archive" ]); then

                        arrayfile=$(printf "%s\nBack2Cat\nDone" "$arrayattachment")
                        arrayfilename=$(printf "%s\n$BACK2CAT\n$DONE" "$arrayattachmentname")

                    elif [ -n "$arrayattachment" ]; then

                        arrayfile=$(printf "%s\nBack2Cat\nBack2Addon\nDone" "$arrayattachment")
                        arrayfilename=$(printf "%s\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$arrayattachmentname")

                    else

                        arrayfile=$(printf "Back2Cat\nBack2Addon\nDone")
                        arrayfilename=$(printf "$BACK2CAT\n$BACK2ADDON\n$DONE")

                    fi

                else

                    arrayfile="$arrayfile"
                    arrayfilename="$arrayfilename"

                fi

                count="$(printf "%s\n" "$arrayfile" | wc -l)"
                printf "\033[1m\033[34m%s\n\033[0m" "Please choose file by typing number and then pressing enter. Press enter or ctrl+c to quit."
                printf "%s\n" "$arrayfilename" | gawk '{print NR")", $0}'

            fi

            BACK2ADDONURL2="$URL"
            n=""
            while true; do
                printf "#? "
                read -r n

                if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

                    if [ -n "$arrayfile" ]; then

                        OPTURL=$(printf "%s\n" "$arrayfile" | gawk NR=="${n}")

                    else

                        OPTURL=$(printf "%s\n" "$arraypage" | gawk NR=="${n}")

                    fi

                    if [ -n "$(printf "%s\n" "$arrayfile")" ]; then

                        if [ "$OPTURL" = "Back2Cat" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="" URL="" OLD="" OLD2="" OLD3="" arrayfile="" arrayfilename="" FILES=0 exec "$0" --old

                        elif [ "$OPTURL" = "Back2Addon" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$BACK2ADDONURL" OLD=1 OLD2="" OLD3="" arrayfile="" arrayfilename="" FILES=0 exec "$0" --old

                        elif [ "$OPTURL" = "Done" ]; then

                            dl

                        elif [ "$OPTURL" != "Back2Cat" ] || [ "$OPTURL" != "Back2Addon" ]; then

                            OPTFILE=$(printf "%s\n" "$arrayfile" | gawk NR=="${n}")
                            OPTFILENAME=$(printf "%s\n" "$arrayfilename" | gawk NR=="${n}")

                            if [ "$URL" = "SRB2-2.1" ] || [ "$URL" = "SRB2-2.1-Legacy" ]; then

                                FILELISTTMP="$OPTFILE"

                            elif [ "$URL" = "SRB2Archive" ]; then

                                FILELISTTMP="https://files.srb2.org/srb2.org/history/$OPTFILE"

                            else

                                FILELISTTMP="https://mb.srb2.org/$OPTFILE"

                            fi

                            FILELIST="$FILELIST
$FILELISTTMP"
                            FILELIST=$(printf "%s\n" "$FILELIST" | gawk '!a[$0]++')
                            FILELISTNAMETMP="$OPTFILENAME"
                            FILELISTNAME="$FILELISTNAME
$FILELISTNAMETMP"
                            FILELISTNAME=$(printf "%s\n" "$FILELISTNAME" | gawk '!a[$0]++')
                            OLD=1 OLD2=1 dlanother

                        fi

                    elif [ "$OPTURL" = "Next" ]; then

                        PAGECODE=$(curl -Ls "https://mb.srb2.org$URL?page=$((PAGE + 1))")
                        arraynextpage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F '<a href="|"' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {print $2}')")

                        if [ "$arraynextpage" != "$arraypage" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="$PAGE" URL="$URL" OLD=1 OLD2=1 OLD3="" FILES=0 exec "$0" --old

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$URL" OLD=1 OLD2=1 OLD3="" FILES=0 exec "$0" --old

                        fi

                    elif [ "$OPTURL" = "Prev" ]; then

                        PAGECODE=$(curl -Ls "https://mb.srb2.org$URL?page=$((PAGE - 2))")
                        arrayprevpage=$(printf "%s\nPrev\nNext\nBack2Cat\nDone" "$(printf "%s\n" "$PAGECODE" | gawk -F '<a href="|"' '/<a href="*.*" class="" data-tp-primary="on" data-xf-init="preview-tooltip" data-preview-url="*.*">/ {print $2}')")

                        if [ "$arrayprevpage" = "$arraypage" ]; then

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$URL" OLD=1 OLD2=1 OLD3="" FILES=0 exec "$0" --old

                        else

                            FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 2)) URL="$URL" OLD=1 OLD2=1 OLD3="" FILES=0 exec "$0" --old

                        fi

                    elif [ "$OPTURL" = "Back2Cat" ]; then

                        FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="" URL="" OLD="" OLD2="" OLD3="" arrayfile="" arrayfilename="" FILES=0 exec "$0" --old

                    elif [ "$OPTURL" = "Done" ]; then

                        dl

                    elif [ "$OPTURL" != "Next" ] || [ "$OPTURL" != "Prev" ] || [ "$OPTURL" != "Back2Cat" ]; then

                        break

                    fi

                else

                    printf "$NOTICE\n%s\n\e[0m" "No file has been chosen."
                    exit

                fi

            done

        fi

        if [ -z "$(printf "%s\n" "$arrayfile")" ]; then

            if [ "$SRB2DLPREVIEW" = 1 ]; then

                # Browser's behaviour depends on set SRB2DLPREVIEW.
                if [ -n "$BROWSER" ]; then

                    printf "%s\n\n" "Opening link to files."
                    "$BROWSER" "https://mb.srb2.org/$OPTURL" > /dev/null &

                elif [ -x "/usr/bin/w3m" ]; then

                    w3m "https://mb.srb2.org/$OPTURL"

                fi

            fi

            URL="$OPTURL"
            ATTACHMENTCODE=$(curl -Ls "https://mb.srb2.org$URL")
            arrayattachment=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'href="|"' '/attachments/ && (/.zip/ || /.7z/ || /.rar/ || /.pk3/ || /.wad/ || /.lua/ || /.exe/ || /.soc/ || /.ZIP/ || /.7Z/ || /.RAR/ || /.PK3/ || /.WAD/ || /.LUA/ || /.EXE/ || /.SOC/) && NF {print $4}' | gawk -F'/' '{print $2"/"$3}' | gawk '!/^\/$/ {print}')
            arrayattachmentname=$(printf "%s\n" "$ATTACHMENTCODE" | gawk -F'">|</span>' '/title/ {split($2,a,"<"); print a[1]}' | gawk '(/.zip$/ || /.7z$/ || /.rar$/ || /.pk3$/ || /.wad$/ || /.lua$/ || /.exe$/ || /.soc$/ || /.ZIP$/ || /.7Z$/ || /.RAR$/ || /.PK3$/ || /.WAD$/ || /.LUA$/ || /.EXE$/ || /.SOC$/) && NF')

            if [ -n "$arrayattachment" ]; then

                arrayfile=$(printf "%s\nBack2Cat\nBack2Addon\nDone" "$arrayattachment")
                arrayfilename=$(printf "%s\n$BACK2CAT\n$BACK2ADDON\n$DONE" "$arrayattachmentname")

            else

                arrayfile=$(printf "Back2Cat\nBack2Addon\nDone")
                arrayfilename=$(printf "$BACK2CAT\n$BACK2ADDON\n$DONE")

            fi

        else

            arrayfile="$arrayfile"
            arrayfilename="$arrayfilename"

        fi

        count="$(printf "%s\n" "$arrayfile" | wc -l)"
        n=""
        clear
        printf "\033[1m\033[34m%s\n\033[0m" "Please choose file by typing number and then pressing enter. Press enter or ctrl+c to quit."
        printf "%s\n" "$arrayfilename" | gawk '{print NR")", $0}'

        while true; do

            printf "#? "
            read -r n

            if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

                OPTURL=$(printf "%s\n" "$arrayfile" | gawk NR=="${n}")

                if [ "$OPTURL" = "Back2Cat" ]; then

                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE="" URL="" OLD="" OLD2="" OLD3="" arrayfile="" arrayfilename="" FILES=0 exec "$0" --old

                elif [ "$OPTURL" = "Back2Addon" ]; then

                    FILELIST="$FILELIST" FILELISTNAME="$FILELISTNAME" DIRECTORY="$DIRECTORY" OLDPAGE=$((PAGE - 1)) URL="$BACK2ADDONURL2" OLD=1 OLD2=1 OLD3="" arrayfile="" arrayfilename="" FILES=0 exec "$0" --old

                elif [ "$OPTURL" = "Done" ]; then

                    dl

                elif [ "$OPTURL" != "Back2Cat" ] || [ "$OPTURL" != "Back2Addon" ]; then

                    OPTFILE=$(printf "%s\n" "$arrayfile" | gawk NR=="${n}")
                    OPTFILENAME=$(printf "%s\n" "$arrayfilename" | gawk NR=="${n}")
                    FILELISTTMP="https://mb.srb2.org/$OPTFILE"
                    FILELIST="$FILELIST
$FILELISTTMP"
                    FILELIST=$(printf "%s\n" "$FILELIST" | gawk '!a[$0]++')
                    FILELISTNAMETMP="$OPTFILENAME"
                    FILELISTNAME="$FILELISTNAME
$FILELISTNAMETMP"
                    FILELISTNAME=$(printf "%s\n" "$FILELISTNAME" | gawk '!a[$0]++')
                    OLD=1 OLD2=1 OLD3=1 dlanother

                fi
                break

            else

                printf "$NOTICE\n%s\n\e[0m" "No file has been chosen."
                exit

            fi

        done
        ;;

    -r | --reusable)

        REUSABLE=1
        ;;

    -s | --search)

        if [ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]; then

            SEARCH=1
            FILES=1
            SEARCHURL="$SEARCHURL"

        else

            SEARCH=1
            FILES=0
            SEARCHURL="$SEARCHURL"

        fi

        if ([ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]) || ([ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -n "$SEARCHURL" ]); then

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        elif [ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -z "$SEARCHURL" ]; then

            if [ -n "$2" ]; then

                if [ "$2" = "-r" ] || [ "$2" = "--reusable" ]; then

                    printf "$NOTICE\n%s\n\e[0m" "No specified search query. No option has been chosen.."
                    exit

                fi

                if [ "$(printf "%s\n" "$*" | gawk '{print $((NF - 1))}')" = "-r" ] || [ "$(printf "%s\n" "$*" | gawk '{print $((NF - 1))}')" = "--reusable" ]; then

                    REUSABLE=1
                    shift
                    OPTS="$*"
                    SEARCHQUERY=$(printf "%s\n" "$OPTS" | gawk 'gsub(/-r|--reusable/,"")')
                    SEARCHQUERY="${SEARCHQUERY% *}"
                    DIRECTORY="${OPTS##* }"

                elif [ "$(printf "%s\n" "$*" | gawk '{print $NF}')" = "-r" ] || [ "$(printf "%s\n" "$*" | gawk '{print $NF}')" = "--reusable" ]; then

                    REUSABLE=1
                    shift
                    OPTS="$*"
                    SEARCHQUERY="${OPTS% *}"
                    DIRECTORY=$(pwd)

                else

                    shift
                    OPTS="$*"
                    ENDARG=$(printf "%s\n" "$OPTS" | gawk 'match($NF, /\//) {print substr($NF, RSTART, RLENGTH)}')

                    if [ "$ENDARG" = "/" ]; then

                        SEARCHQUERY="${OPTS% *}"
                        DIRECTORY="${OPTS##* }"

                    else

                        SEARCHQUERY="$*"
                        DIRECTORY=$(pwd)

                    fi

                fi

            else

                printf "\n%s\n" "Please enter resource to search."
                read -r SEARCHQUERY

            fi

            # Search resource functionality.
            WEBKITRANDOM=$(date | md5sum | gawk '{print substr($1,length($1)-14)}')
            SEARCHCOOKIES=$(curl -is https://mb.srb2.org/search | gawk -F'=|"|;' '/xf_csrf|xfToken/ {gsub(/^[\t]+/,""); print $2$9}')
            XF_CSRF=$(printf "%s\n" "xf_csrf=$SEARCHCOOKIES" | head -n1)
            XFTOKEN=$(printf "%s\n" "$SEARCHCOOKIES" | tail -n1)
            SEARCHFORM="$(printf '%b_' '------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="keywords"\r\n\r\n'"$SEARCHQUERY"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[users]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[newer_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[older_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[prefixes][]"\r\n\r\n'"$REUSABLE"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[categories][]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[child_categories]"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="order"\r\n\r\ndate\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="search_type"\r\n\r\nresource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfRequestUri"\r\n\r\n/search/?type=resource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfWithData"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfResponseType"\r\n\r\njson\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'--\r\n')"
            SEARCHFORM="${SEARCHFORM%_}"
            SEARCHURL=$(curl -s 'https://mb.srb2.org/search/search' -H 'accept: application/json, text/javascript' -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary'"$WEBKITRANDOM"'' -H 'cookie: '"$XF_CSRF"'' --data-binary "$SEARCHFORM" --compressed | gawk -F'"' '/redirect/ {print $4}')

            if [ "$REUSABLE" = 1 ]; then

                SEARCHURL=$(printf "%s\n" "$SEARCHURL" | gawk '{gsub(/\[/,"\\[") gsub(/\]/,"\\]");print}')

            fi

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        fi
        ;;

    -u | --search-user)

        if [ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]; then

            SEARCH=1
            FILES=1
            SEARCHURL="$SEARCHURL"

        else

            SEARCH=1
            FILES=0
            SEARCHURL="$SEARCHURL"

        fi

        if ([ "$SEARCH" = 1 ] && [ "$FILES" = 1 ] && [ -n "$SEARCHURL" ]) || ([ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -n "$SEARCHURL" ]); then

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        elif [ "$SEARCH" = 1 ] && [ "$FILES" = 0 ] && [ -z "$SEARCHURL" ]; then

            if [ -n "$2" ]; then

                if [ "$2" = "-r" ] || [ "$2" = "--reusable" ]; then

                    printf "$NOTICE\n%s\n\e[0m" "No specified search query. No option has been chosen.."
                    exit

                fi

                # Checks to make sure --reusable option does not become part of search query.
                if [ "$(printf "%s\n" "$*" | gawk '{print $((NF - 1))}')" = "-r" ] || [ "$(printf "%s\n" "$*" | gawk '{print $((NF - 1))}')" = "--reusable" ]; then

                    REUSABLE=1
                    shift
                    OPTS="$*"
                    SEARCHQUERYUSER=$(printf "%s\n" "$OPTS" | gawk 'gsub(/-r|--reusable/,"")')
                    SEARCHQUERYUSER="${SEARCHQUERYUSER% *}"
                    DIRECTORY="${OPTS##* }"

                elif [ "$(printf "%s\n" "$*" | gawk '{print $NF}')" = "-r" ] || [ "$(printf "%s\n" "$*" | gawk '{print $NF}')" = "--reusable" ]; then

                    REUSABLE=1
                    shift
                    OPTS="$*"
                    SEARCHQUERYUSER="${OPTS% *}"
                    DIRECTORY=$(pwd)

                else

                    shift
                    OPTS="$*"
                    ENDARG=$(printf "%s\n" "$OPTS" | gawk 'match($NF, /\//) {print substr($NF, RSTART, RLENGTH)}')

                    if [ "$ENDARG" = "/" ]; then

                        SEARCHQUERYUSER="${OPTS% *}"
                        DIRECTORY="${OPTS##* }"

                    else

                        SEARCHQUERYUSER="$*"
                        DIRECTORY=$(pwd)

                    fi

                fi

            else

                printf "\n%s\n" "Please enter resource to search."
                read -r SEARCHQUERYUSER

            fi

            # Search user functionality.
            WEBKITRANDOM=$(date | md5sum | gawk '{print substr($1,length($1)-14)}')
            SEARCHCOOKIES=$(curl -is https://mb.srb2.org/search | gawk -F'=|"|;' '/xf_csrf|xfToken/ {gsub(/^[\t]+/,""); print $2$9}')
            XF_CSRF=$(printf "%s\n" "xf_csrf=$SEARCHCOOKIES" | head -n1)
            XFTOKEN=$(printf "%s\n" "$SEARCHCOOKIES" | tail -n1)
            SEARCHFORM="$(printf '%b_' '------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="keywords"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[users]"\r\n\r\n'"$SEARCHQUERYUSER"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[newer_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[older_than]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[prefixes][]"\r\n\r\n'"$REUSABLE"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[categories][]"\r\n\r\n\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="c[child_categories]"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="order"\r\n\r\ndate\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="search_type"\r\n\r\nresource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfRequestUri"\r\n\r\n/search/?type=resource\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfWithData"\r\n\r\n1\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfToken"\r\n\r\n'"$XFTOKEN"'\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'\r\nContent-Disposition: form-data; name="_xfResponseType"\r\n\r\njson\r\n------WebKitFormBoundary'"$WEBKITRANDOM"'--\r\n')"
            SEARCHFORM="${SEARCHFORM%_}"
            SEARCHURL=$(curl -s 'https://mb.srb2.org/search/search' -H 'accept: application/json, text/javascript' -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary'"$WEBKITRANDOM"'' -H 'cookie: '"$XF_CSRF"'' --data-binary "$SEARCHFORM" --compressed | gawk -F'"' '/redirect/ {print $4}')

            if [ "$REUSABLE" = 1 ]; then

                SEARCHURL=$(printf "%s\n" "$SEARCHURL" | gawk '{gsub(/\[/,"\\[") gsub(/\]/,"\\]");print}')

            fi

            SEARCHPAGE=$((SEARCHPAGE + 1)) PAGE="$SEARCHPAGE" choosepage
            dlanother

        fi
        ;;

    -k | --kart)

        # Make variables to be remembered after rerunning script with "exec $0".
        if [ "$KARTCHARACTER" = 1 ]; then

            KARTCHARACTER=1

        elif [ "$KARTMAP" = 1 ]; then

            KARTMAP=1

        elif [ "$KARTMISC" = 1 ]; then

            KARTMISC=1

        elif [ "$KARTBUILD" = 1 ]; then

            KARTBUILD=1

        else

            KARTCHARACTER=0
            KARTMAP=0
            KARTMISC=0
            KARTBUILD=0
            FILES=0

            if ([ "$2" = "-r" ] || [ "$2" = "--reusable" ]) && [ -z "$DIRECTORY" ]; then

                REUSABLE=1
                shift
                DIRECTORY="$2"

            elif [ -z "$DIRECTORY" ]; then

                DIRECTORY="$2"

            else

                DIRECTORY="$DIRECTORY"

            fi

        fi

        if [ "$KARTCHARACTER" = 0 ] || [ "$KARTMAP" = 0 ] || [ "$KARTMISC" = 0 ] || [ "$KARTBUILD" = 0 ]; then

            # Choose SRB2 Kart category.
            while

                clear
                srb2kartlogo
                printf "\033[1m\033[34m%s\n\033[0m" "Please choose category by typing number and then pressing enter. Press enter or ctrl+c to quit."
                for loop in "Kart Characters" "Kart Maps" "Kart Miscellaneous" "Kart Builds" "$(printf "\033[1m\033[34m%s\033[0m" "Done")"; do printf "%s\n" "$((i += 1))) $loop"; done
                printf "#? "
                read -r choose
            do

                unset i

                if [ -n "$choose" ]; then

                    case $choose in

                        "1")

                            KARTCHARACTER=1
                            break
                            ;;

                        "2")

                            KARTMAP=1
                            break
                            ;;

                        "3")

                            KARTMISC=1
                            break
                            ;;

                        "4")

                            KARTBUILD=1
                            break
                            ;;

                        "5")

                            dl

                            ;;

                    esac

                else

                    printf "$NOTICE\n%s\n\e[0m" "No category has been chosen."
                    exit

                fi

            done

        fi

        if [ "$KARTCHARACTER" = 1 ]; then

            KARTCHARACTERPAGE=$((KARTCHARACTERPAGE + 1)) PAGE="$KARTCHARACTERPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-characters.13/?page" choosepage

        elif [ "$KARTMAP" = 1 ]; then

            KARTMAPPAGE=$((KARTMAPPAGE + 1)) PAGE="$KARTMAPPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-maps.14/?page" choosepage

        elif [ "$KARTMISC" = 1 ]; then

            KARTMISCPAGE=$((KARTMISCPAGE + 1)) PAGE="$KARTMISCPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-miscellaneous.15/?page" choosepage

        elif [ "$KARTBUILD" = 1 ]; then

            KARTBUILDPAGE=$((KARTBUILDPAGE + 1)) PAGE="$KARTBUILDPAGE" CATURL="https://mb.srb2.org/addons/categories/kart-custom-builds.16/?page" choosepage

        fi

        dlanother
        ;;

esac

###SRB2###

# Make variables to be remembered after rerunning script with "exec $0".
if [ "$CHARACTER" = 1 ]; then

    CHARACTER=1

elif [ "$MAP" = 1 ]; then

    MAP=1

elif [ "$GAMETYPE" = 1 ]; then

    GAMETYPE=1

elif [ "$ASSET" = 1 ]; then

    ASSET=1

elif [ "$LUA" = 1 ]; then

    LUA=1

elif [ "$PLAYERCOLOR" = 1 ]; then

    PLAYERCOLOR=1

elif [ "$MISC" = 1 ]; then

    MISC=1

elif [ "$SOFTWARE" = 1 ]; then

    SOFTWARE=1

elif [ "$BUILD" = 1 ]; then

    BUILD=1

else

    CHARACTER=0
    MAP=0
    GAMETYPE=0
    ASSET=0
    LUA=0
    PLAYERCOLOR=0
    MISC=0
    SOFTWARE=0
    BUILD=0
    FILES=0

    if ([ "$1" = "-r" ] || [ "$1" = "--reusable" ]) && [ -z "$DIRECTORY" ]; then

        REUSABLE=1
        DIRECTORY="$2"

    elif [ -z "$DIRECTORY" ]; then

        DIRECTORY="$1"

    else

        DIRECTORY="$DIRECTORY"

    fi

fi

if [ "$CHARACTER" = 0 ] || [ "$MAP" = 0 ] || [ "$GAMETYPE" = 0 ] || [ "$ASSET" = 0 ] || [ "$LUA" = 0 ] || [ "$PLAYERCOLOR" = 0 ] || [ "$MISC" = 0 ] || [ "$SOFTWARE" = 0 ] || [ "$BUILD" = 0 ]; then

    # Choose SRB2 category.
    while

        clear
        srb2logo
        printf "\033[1m\033[34m%s\n\033[0m" "Please choose category by typing number and then pressing enter. Press enter or ctrl+c to quit."

        for loop in "Characters" "Maps" "Gametypes" "Assets" "Lua" "Player Colors" "Miscellaneous" "Software" "Builds" "$(printf "\033[1m\033[34m%s\033[0m" "Done")"; do printf "%s\n" "$((i += 1))) $loop"; done

        printf "#? "
        read -r choose
    do

        unset i

        if [ -n "$choose" ]; then

            case $choose in

                "1")

                    CHARACTER=1
                    break
                    ;;

                "2")

                    MAP=1
                    break
                    ;;

                "3")

                    GAMETYPE=1
                    break
                    ;;

                "4")

                    ASSET=1
                    break
                    ;;

                "5")

                    LUA=1
                    break
                    ;;

                "6")

                    PLAYERCOLOR=1
                    break
                    ;;

                "7")

                    MISC=1
                    break
                    ;;

                "8")

                    SOFTWARE=1
                    break
                    ;;

                "9")

                    BUILD=1
                    break
                    ;;

                "10")

                    dl
                    ;;

            esac

        else

            printf "$NOTICE\n%s\n\e[0m" "No category has been chosen."
            exit

        fi

    done

fi

# Switching to chosen category and page.
if [ "$CHARACTER" = 1 ]; then

    CHARACTERPAGE=$((CHARACTERPAGE + 1)) PAGE="$CHARACTERPAGE" CATURL="https://mb.srb2.org/addons/categories/characters.5/?page" choosepage

elif [ "$MAP" = 1 ]; then

    MAPPAGE=$((MAPPAGE + 1)) PAGE="$MAPPAGE" CATURL="https://mb.srb2.org/addons/categories/maps.4/?page" choosepage

elif [ "$GAMETYPE" = 1 ]; then

    GAMETYPEPAGE=$((GAMETYPEPAGE + 1)) PAGE="$GAMETYPEPAGE" CATURL="https://mb.srb2.org/addons/categories/custom-gametypes.3/?page" choosepage

elif [ "$ASSET" = 1 ]; then

    ASSETPAGE=$((ASSETPAGE + 1)) PAGE="$ASSETPAGE" CATURL="https://mb.srb2.org/addons/categories/assets.6/?page" choosepage

elif [ "$LUA" = 1 ]; then

    LUAPAGE=$((LUAPAGE + 1)) PAGE="$LUAPAGE" CATURL="https://mb.srb2.org/addons/categories/lua.7/?page" choosepage

elif [ "$PLAYERCOLOR" = 1 ]; then

    PLAYERCOLORPAGE=$((PLAYERCOLORPAGE + 1)) PAGE="$PLAYERCOLORPAGE" CATURL="https://mb.srb2.org/addons/categories/player-colors.11/?page" choosepage

elif [ "$MISC" = 1 ]; then

    MISCPAGE=$((MISCPAGE + 1)) PAGE="$MISCPAGE" CATURL="https://mb.srb2.org/addons/categories/miscellaneous.8/?page" choosepage

elif [ "$SOFTWARE" = 1 ]; then

    SOFTWAREPAGE=$((SOFTWAREPAGE + 1)) PAGE="$SOFTWAREPAGE" CATURL="https://mb.srb2.org/addons/categories/software.9/?page" choosepage

elif [ "$BUILD" = 1 ]; then

    BUILDPAGE=$((BUILDPAGE + 1)) PAGE="$BUILDPAGE" CATURL="https://mb.srb2.org/addons/categories/custom-builds.10/?page" choosepage

fi

dlanother
